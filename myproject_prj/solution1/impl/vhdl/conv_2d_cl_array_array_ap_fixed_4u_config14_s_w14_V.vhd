-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_rom is 
    generic(
             DWIDTH     : integer := 113; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 36
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11100001100110001111111111111111111111000000010001111111111111111111111011111110111111111111111111111010110001000", 
    1 => "11111001101000000111111111111111111101110010100001111111111111111110110000111110000000000000000000000100100000000", 
    2 => "00001000001000010111111111111111111100110100000101111111111111111111011001100000100000000000000000010101110111011", 
    3 => "00000110110100010000000000000000000001110110100100000000000000000010010001011000111111111111111111110000010111110", 
    4 => "01000001110111110000000000000000000101110000000010000000000000000001101010000001000000000000000000100011110111101", 
    5 => "11111101101111000000000000000000001100101100011000000000000000000010001100110010011111111111111111111011001001100", 
    6 => "00011111001100100000000000000000000000101000001111111111111111111111010101100110100000000000000000001001110001010", 
    7 => "00001011100100111000000000000000000001111111000000000000000000000011010010010100011111111111111111011100110101010", 
    8 => "11110001000011110111111111111111111011000000100010000000000000000000100011000010100000000000000000001100011101011", 
    9 => "11101101101010110111111111111111111010001010011011111111111111111111000101100000111111111111111111100110100011110", 
    10 => "00101010101110011000000000000000000011000110011010000000000000000001010011110011000000000000000000100011011011010", 
    11 => "11100111011010110111111111111111110010100101011011111111111111111111110110000100011111111111111111110101111001010", 
    12 => "00010000001000100000000000000000000011110101100111111111111111111111110101101000011111111111111111110111000011011", 
    13 => "00000110011010000000000000000000000101000111111100000000000000000001100011000111000000000000000000010111000101111", 
    14 => "00011010101100001000000000000000000110000101111110000000000000000000110111000101111111111111111111010000111111100", 
    15 => "11101000010011010000000000000000000110010111000110000000000000000000101011100010100000000000000000111100111110101", 
    16 => "00010111001000000111111111111111111011100101111000000000000000000000100101000010000000000000000000011001010110101", 
    17 => "11110011000011101000000000000000000111010101101100000000000000000011110001100100100000000000000000000010010100101", 
    18 => "11110011011110001111111111111111111000001101011101111111111111111111001111001110011111111111111111011101010010001", 
    19 => "11011100010100001111111111111111110101010001101011111111111111111110100000111110100000000000000000011101100011001", 
    20 => "00110110001111011111111111111111111010101100110100000000000000000000011000101010111111111111111111110101110100000", 
    21 => "11100001011100010111111111111111110011010110100010000000000000000000101011011011000000000000000000000101110011111", 
    22 => "00000010100110101000000000000000000010010101100001111111111111111101010111111000011111111111111111101001000010011", 
    23 => "11111110110000001000000000000000000111011111010011111111111111111110011001111110000000000000000000011011101101101", 
    24 => "11101111001001001111111111111111110011001100111011111111111111111100101110000001111111111111111111111110010110011", 
    25 => "00000001110000111000000000000000000010011101100110000000000000000000110111110111000000000000000000011000011100001", 
    26 => "00000010111110111000000000000000000010000000110010000000000000000010101010010111000000000000000000100111100110011", 
    27 => "00010011110111110111111111111111111111110110110011111111111111111111010100100110011111111111111111100111000000100", 
    28 => "11100100110001010111111111111111010000100100011000000000000000000000000111001100111111111111111111010101110011110", 
    29 => "11100010111001011000000000000000000001011100100100000000000000000000011000011111100000000000000000001010101010010", 
    30 => "11100100001101000111111111111111110110101010010111111111111111111110011111111100111111111111111111111100101001001", 
    31 => "11111100011011000111111111111111111111101101010001111111111111111110000101110010011111111111111111011010000001000", 
    32 => "01101001101111110000000000000000000011000000111100000000000000000100010111100011100000000000000001100111010010001", 
    33 => "11011101110110100111111111111111111010110111001101111111111111111110011000010001000000000000000000000011101011011", 
    34 => "00000010100000101000000000000000000010100000010110000000000000000001101000111101100000000000000000001100010100101", 
    35 => "00110110101101010000000000000000000111000010101100000000000000000010001101101100000000000000000000000001100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V is
    generic (
        DataWidth : INTEGER := 113;
        AddressRange : INTEGER := 36;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V is
    component conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_rom_U :  component conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


