// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_array_array_ap_fixed_4u_config11_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_state12 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [31:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [31:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [31:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [31:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [31:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [31:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [31:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] kernel_data_V_1_0;
reg   [31:0] kernel_data_V_1_1;
reg   [31:0] kernel_data_V_1_2;
reg   [31:0] kernel_data_V_1_3;
reg   [31:0] kernel_data_V_1_4;
reg   [31:0] kernel_data_V_1_5;
reg   [31:0] kernel_data_V_1_6;
reg   [31:0] kernel_data_V_1_7;
reg   [31:0] kernel_data_V_1_8;
reg   [31:0] kernel_data_V_1_9;
reg   [31:0] kernel_data_V_1_10;
reg   [31:0] kernel_data_V_1_11;
reg   [31:0] kernel_data_V_1_12;
reg   [31:0] kernel_data_V_1_13;
reg   [31:0] kernel_data_V_1_14;
reg   [31:0] kernel_data_V_1_15;
reg   [31:0] kernel_data_V_1_16;
reg   [31:0] kernel_data_V_1_17;
reg   [31:0] kernel_data_V_1_18;
reg   [31:0] kernel_data_V_1_19;
reg   [31:0] kernel_data_V_1_20;
reg   [31:0] kernel_data_V_1_21;
reg   [31:0] kernel_data_V_1_22;
reg   [31:0] kernel_data_V_1_23;
reg   [31:0] kernel_data_V_1_24;
reg   [31:0] kernel_data_V_1_25;
reg   [31:0] kernel_data_V_1_26;
reg   [31:0] kernel_data_V_1_27;
reg   [31:0] kernel_data_V_1_28;
reg   [31:0] kernel_data_V_1_29;
reg   [31:0] kernel_data_V_1_30;
reg   [31:0] kernel_data_V_1_31;
reg   [31:0] kernel_data_V_1_32;
reg   [31:0] kernel_data_V_1_33;
reg   [31:0] kernel_data_V_1_34;
reg   [31:0] kernel_data_V_1_35;
wire   [5:0] w11_V_address0;
reg    w11_V_ce0;
wire   [112:0] w11_V_q0;
reg   [31:0] pX_2;
reg   [31:0] sX_2;
reg   [31:0] pY_2;
reg   [31:0] sY_2;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_state2;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state12;
reg   [0:0] and_ln272_10_reg_1369;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [5:0] w_index14_reg_255;
reg   [31:0] res_out_0_V12_reg_267;
reg   [31:0] res_out_1_V10_reg_278;
reg   [31:0] res_out_2_V8_reg_289;
reg   [31:0] tmp_data_3_V_716_reg_300;
reg   [31:0] tmp_data_0_V_reg_1317;
wire    io_acc_block_signal_op23;
reg   [31:0] tmp_data_1_V_reg_1322;
reg   [31:0] tmp_data_2_V_reg_1327;
reg   [31:0] tmp_data_3_V_reg_1332;
reg   [31:0] sX_2_load_reg_1337;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln272_fu_870_p2;
reg   [0:0] icmp_ln272_reg_1342;
reg   [31:0] sY_2_load_reg_1347;
wire   [0:0] icmp_ln272_13_fu_880_p2;
reg   [0:0] icmp_ln272_13_reg_1352;
reg   [31:0] pY_2_load_reg_1357;
reg   [31:0] pX_2_load_reg_1363;
wire   [0:0] and_ln272_10_fu_938_p2;
wire   [5:0] add_ln78_fu_944_p2;
reg   [5:0] add_ln78_reg_1373;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] w_index_fu_955_p2;
reg   [5:0] w_index_reg_1383;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln64_fu_961_p2;
reg   [0:0] icmp_ln64_reg_1388;
reg   [0:0] icmp_ln64_reg_1388_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_1388_pp0_iter2_reg;
reg   [0:0] icmp_ln64_reg_1388_pp0_iter3_reg;
reg   [0:0] icmp_ln64_reg_1388_pp0_iter4_reg;
reg   [0:0] icmp_ln64_reg_1388_pp0_iter5_reg;
reg   [0:0] icmp_ln64_reg_1388_pp0_iter6_reg;
wire   [31:0] tmp_14_fu_1015_p38;
reg   [31:0] tmp_14_reg_1392;
wire   [31:0] trunc_ln76_fu_1093_p1;
reg  signed [31:0] trunc_ln76_reg_1397;
reg  signed [31:0] tmp_15_reg_1402;
reg  signed [31:0] tmp_16_reg_1407;
reg  signed [16:0] tmp_17_reg_1412;
wire  signed [47:0] sext_ln1116_cast_fu_1127_p1;
reg   [31:0] trunc_ln_reg_1445;
reg   [31:0] trunc_ln708_s_reg_1450;
reg   [31:0] trunc_ln708_2_reg_1455;
reg   [31:0] trunc_ln708_3_reg_1460;
wire   [31:0] acc_0_V_fu_1206_p2;
reg   [31:0] acc_0_V_reg_1465;
reg    ap_enable_reg_pp0_iter7;
wire   [31:0] acc_1_V_fu_1211_p2;
reg   [31:0] acc_1_V_reg_1471;
wire   [31:0] acc_2_V_fu_1216_p2;
reg   [31:0] acc_2_V_reg_1477;
wire   [31:0] acc_3_V_fu_1221_p2;
reg   [31:0] acc_3_V_reg_1483;
wire   [0:0] icmp_ln293_fu_1226_p2;
reg   [0:0] icmp_ln293_reg_1489;
wire    io_acc_block_signal_op238;
reg    ap_block_state12;
wire   [31:0] select_ln308_fu_1247_p3;
reg   [31:0] select_ln308_reg_1493;
wire   [0:0] icmp_ln297_fu_1266_p2;
reg   [0:0] icmp_ln297_reg_1498;
wire   [31:0] select_ln303_fu_1287_p3;
reg   [31:0] select_ln303_reg_1502;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_start;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_done;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_ready;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_0;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_1;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_2;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_3;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_4;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_5;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_6;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_7;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_8;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_9;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_10;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_11;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_12;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_13;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_14;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_15;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_16;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_17;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_18;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_19;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_20;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_21;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_22;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_23;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_24;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_25;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_26;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_27;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_28;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_29;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_30;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_31;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_32;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_33;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_34;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_35;
reg   [5:0] indvar_flatten15_reg_243;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln78_fu_1311_p2;
reg   [5:0] ap_phi_mux_w_index14_phi_fu_259_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_315_p4;
reg   [31:0] storemerge_i_i_reg_311;
wire   [63:0] zext_ln76_fu_950_p1;
wire   [31:0] add_ln306_fu_1231_p2;
wire   [31:0] add_ln301_fu_1271_p2;
wire   [30:0] tmp_fu_890_p4;
wire   [30:0] tmp_8_fu_910_p4;
wire   [0:0] icmp_ln272_14_fu_900_p2;
wire   [0:0] icmp_ln272_15_fu_920_p2;
wire   [0:0] and_ln272_9_fu_932_p2;
wire   [0:0] and_ln272_fu_926_p2;
wire  signed [31:0] grp_fu_1133_p1;
wire  signed [31:0] grp_fu_1142_p1;
wire  signed [31:0] grp_fu_1151_p1;
wire  signed [31:0] grp_fu_1160_p0;
wire   [47:0] grp_fu_1133_p2;
wire   [47:0] grp_fu_1142_p2;
wire   [47:0] grp_fu_1151_p2;
wire   [47:0] grp_fu_1160_p2;
wire   [31:0] add_ln308_fu_1242_p2;
wire   [31:0] add_ln303_fu_1282_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_288;
reg    ap_condition_297;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 kernel_data_V_1_0 = 32'd0;
#0 kernel_data_V_1_1 = 32'd0;
#0 kernel_data_V_1_2 = 32'd0;
#0 kernel_data_V_1_3 = 32'd0;
#0 kernel_data_V_1_4 = 32'd0;
#0 kernel_data_V_1_5 = 32'd0;
#0 kernel_data_V_1_6 = 32'd0;
#0 kernel_data_V_1_7 = 32'd0;
#0 kernel_data_V_1_8 = 32'd0;
#0 kernel_data_V_1_9 = 32'd0;
#0 kernel_data_V_1_10 = 32'd0;
#0 kernel_data_V_1_11 = 32'd0;
#0 kernel_data_V_1_12 = 32'd0;
#0 kernel_data_V_1_13 = 32'd0;
#0 kernel_data_V_1_14 = 32'd0;
#0 kernel_data_V_1_15 = 32'd0;
#0 kernel_data_V_1_16 = 32'd0;
#0 kernel_data_V_1_17 = 32'd0;
#0 kernel_data_V_1_18 = 32'd0;
#0 kernel_data_V_1_19 = 32'd0;
#0 kernel_data_V_1_20 = 32'd0;
#0 kernel_data_V_1_21 = 32'd0;
#0 kernel_data_V_1_22 = 32'd0;
#0 kernel_data_V_1_23 = 32'd0;
#0 kernel_data_V_1_24 = 32'd0;
#0 kernel_data_V_1_25 = 32'd0;
#0 kernel_data_V_1_26 = 32'd0;
#0 kernel_data_V_1_27 = 32'd0;
#0 kernel_data_V_1_28 = 32'd0;
#0 kernel_data_V_1_29 = 32'd0;
#0 kernel_data_V_1_30 = 32'd0;
#0 kernel_data_V_1_31 = 32'd0;
#0 kernel_data_V_1_32 = 32'd0;
#0 kernel_data_V_1_33 = 32'd0;
#0 kernel_data_V_1_34 = 32'd0;
#0 kernel_data_V_1_35 = 32'd0;
#0 pX_2 = 32'd0;
#0 sX_2 = 32'd0;
#0 pY_2 = 32'd0;
#0 sY_2 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

conv_2d_cl_array_array_ap_fixed_4u_config11_s_w11_V #(
    .DataWidth( 113 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
w11_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w11_V_address0),
    .ce0(w11_V_ce0),
    .q0(w11_V_q0)
);

shift_line_buffer_array_ap_fixed_4u_config11_s call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_ready),
    .in_elem_data_0_V_read(tmp_data_0_V_reg_1317),
    .in_elem_data_1_V_read(tmp_data_1_V_reg_1322),
    .in_elem_data_2_V_read(tmp_data_2_V_reg_1327),
    .in_elem_data_3_V_read(tmp_data_3_V_reg_1332),
    .kernel_window_4_V_read(kernel_data_V_1_4),
    .kernel_window_5_V_read(kernel_data_V_1_5),
    .kernel_window_6_V_read(kernel_data_V_1_6),
    .kernel_window_7_V_read(kernel_data_V_1_7),
    .kernel_window_8_V_read(kernel_data_V_1_8),
    .kernel_window_9_V_read(kernel_data_V_1_9),
    .kernel_window_10_V_read(kernel_data_V_1_10),
    .kernel_window_11_V_read(kernel_data_V_1_11),
    .kernel_window_16_V_read(kernel_data_V_1_16),
    .kernel_window_17_V_read(kernel_data_V_1_17),
    .kernel_window_18_V_read(kernel_data_V_1_18),
    .kernel_window_19_V_read(kernel_data_V_1_19),
    .kernel_window_20_V_read(kernel_data_V_1_20),
    .kernel_window_21_V_read(kernel_data_V_1_21),
    .kernel_window_22_V_read(kernel_data_V_1_22),
    .kernel_window_23_V_read(kernel_data_V_1_23),
    .kernel_window_28_V_read(kernel_data_V_1_28),
    .kernel_window_29_V_read(kernel_data_V_1_29),
    .kernel_window_30_V_read(kernel_data_V_1_30),
    .kernel_window_31_V_read(kernel_data_V_1_31),
    .kernel_window_32_V_read(kernel_data_V_1_32),
    .kernel_window_33_V_read(kernel_data_V_1_33),
    .kernel_window_34_V_read(kernel_data_V_1_34),
    .kernel_window_35_V_read(kernel_data_V_1_35),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_3),
    .ap_return_4(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_4),
    .ap_return_5(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_5),
    .ap_return_6(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_6),
    .ap_return_7(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_7),
    .ap_return_8(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_8),
    .ap_return_9(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_9),
    .ap_return_10(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_10),
    .ap_return_11(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_11),
    .ap_return_12(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_12),
    .ap_return_13(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_13),
    .ap_return_14(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_14),
    .ap_return_15(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_15),
    .ap_return_16(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_16),
    .ap_return_17(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_17),
    .ap_return_18(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_18),
    .ap_return_19(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_19),
    .ap_return_20(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_20),
    .ap_return_21(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_21),
    .ap_return_22(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_22),
    .ap_return_23(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_23),
    .ap_return_24(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_24),
    .ap_return_25(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_25),
    .ap_return_26(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_26),
    .ap_return_27(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_27),
    .ap_return_28(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_28),
    .ap_return_29(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_29),
    .ap_return_30(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_30),
    .ap_return_31(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_31),
    .ap_return_32(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_32),
    .ap_return_33(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_33),
    .ap_return_34(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_34),
    .ap_return_35(call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_35)
);

myproject_axi_mux_366_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
myproject_axi_mux_366_32_1_1_U339(
    .din0(kernel_data_V_1_0),
    .din1(kernel_data_V_1_1),
    .din2(kernel_data_V_1_2),
    .din3(kernel_data_V_1_3),
    .din4(kernel_data_V_1_4),
    .din5(kernel_data_V_1_5),
    .din6(kernel_data_V_1_6),
    .din7(kernel_data_V_1_7),
    .din8(kernel_data_V_1_8),
    .din9(kernel_data_V_1_9),
    .din10(kernel_data_V_1_10),
    .din11(kernel_data_V_1_11),
    .din12(kernel_data_V_1_12),
    .din13(kernel_data_V_1_13),
    .din14(kernel_data_V_1_14),
    .din15(kernel_data_V_1_15),
    .din16(kernel_data_V_1_16),
    .din17(kernel_data_V_1_17),
    .din18(kernel_data_V_1_18),
    .din19(kernel_data_V_1_19),
    .din20(kernel_data_V_1_20),
    .din21(kernel_data_V_1_21),
    .din22(kernel_data_V_1_22),
    .din23(kernel_data_V_1_23),
    .din24(kernel_data_V_1_24),
    .din25(kernel_data_V_1_25),
    .din26(kernel_data_V_1_26),
    .din27(kernel_data_V_1_27),
    .din28(kernel_data_V_1_28),
    .din29(kernel_data_V_1_29),
    .din30(kernel_data_V_1_30),
    .din31(kernel_data_V_1_31),
    .din32(kernel_data_V_1_32),
    .din33(kernel_data_V_1_33),
    .din34(kernel_data_V_1_34),
    .din35(kernel_data_V_1_35),
    .din36(w_index14_reg_255),
    .dout(tmp_14_fu_1015_p38)
);

myproject_axi_mul_32s_32s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_32s_48_5_1_U340(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln76_reg_1397),
    .din1(grp_fu_1133_p1),
    .ce(1'b1),
    .dout(grp_fu_1133_p2)
);

myproject_axi_mul_32s_32s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_32s_48_5_1_U341(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_15_reg_1402),
    .din1(grp_fu_1142_p1),
    .ce(1'b1),
    .dout(grp_fu_1142_p2)
);

myproject_axi_mul_32s_32s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_32s_48_5_1_U342(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_16_reg_1407),
    .din1(grp_fu_1151_p1),
    .ce(1'b1),
    .dout(grp_fu_1151_p2)
);

myproject_axi_mul_32s_17s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_17s_48_5_1_U343(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1160_p0),
    .din1(tmp_17_reg_1412),
    .ce(1'b1),
    .dout(grp_fu_1160_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1311_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_961_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        indvar_flatten15_reg_243 <= add_ln78_reg_1373;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten15_reg_243 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_288)) begin
        if ((icmp_ln293_fu_1226_p2 == 1'd1)) begin
            pX_2 <= 32'd0;
        end else if ((icmp_ln293_fu_1226_p2 == 1'd0)) begin
            pX_2 <= add_ln306_fu_1231_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_297)) begin
        if ((icmp_ln297_fu_1266_p2 == 1'd1)) begin
            pY_2 <= 32'd0;
        end else if ((icmp_ln297_fu_1266_p2 == 1'd0)) begin
            pY_2 <= add_ln301_fu_1271_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1388_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        res_out_0_V12_reg_267 <= acc_0_V_fu_1206_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
        res_out_0_V12_reg_267 <= 32'd11600;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1388_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        res_out_1_V10_reg_278 <= acc_1_V_fu_1211_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
        res_out_1_V10_reg_278 <= 32'd9916;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1388_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        res_out_2_V8_reg_289 <= acc_2_V_fu_1216_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
        res_out_2_V8_reg_289 <= 32'd4294962116;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_reg_1489 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        sX_2 <= select_ln308_reg_1493;
    end else if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1226_p2 == 1'd1))) begin
        sX_2 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln297_fu_1266_p2 == 1'd1) & (icmp_ln293_fu_1226_p2 == 1'd1))) begin
        storemerge_i_i_reg_311 <= 32'd0;
    end else if (((icmp_ln297_reg_1498 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln293_reg_1489 == 1'd1))) begin
        storemerge_i_i_reg_311 <= select_ln303_reg_1502;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1388_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        tmp_data_3_V_716_reg_300 <= acc_3_V_fu_1221_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
        tmp_data_3_V_716_reg_300 <= 32'd1222;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1388 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_index14_reg_255 <= w_index_reg_1383;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
        w_index14_reg_255 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        acc_0_V_reg_1465 <= acc_0_V_fu_1206_p2;
        acc_1_V_reg_1471 <= acc_1_V_fu_1211_p2;
        acc_2_V_reg_1477 <= acc_2_V_fu_1216_p2;
        acc_3_V_reg_1483 <= acc_3_V_fu_1221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln78_reg_1373 <= add_ln78_fu_944_p2;
        and_ln272_10_reg_1369 <= and_ln272_10_fu_938_p2;
        icmp_ln272_13_reg_1352 <= icmp_ln272_13_fu_880_p2;
        icmp_ln272_reg_1342 <= icmp_ln272_fu_870_p2;
        kernel_data_V_1_0 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_0;
        kernel_data_V_1_1 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_1;
        kernel_data_V_1_10 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_18;
        kernel_data_V_1_11 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_19;
        kernel_data_V_1_12 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_4;
        kernel_data_V_1_13 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_5;
        kernel_data_V_1_14 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_6;
        kernel_data_V_1_15 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_7;
        kernel_data_V_1_16 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_20;
        kernel_data_V_1_17 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_21;
        kernel_data_V_1_18 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_22;
        kernel_data_V_1_19 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_23;
        kernel_data_V_1_2 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_2;
        kernel_data_V_1_20 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_24;
        kernel_data_V_1_21 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_25;
        kernel_data_V_1_22 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_26;
        kernel_data_V_1_23 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_27;
        kernel_data_V_1_24 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_8;
        kernel_data_V_1_25 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_9;
        kernel_data_V_1_26 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_10;
        kernel_data_V_1_27 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_11;
        kernel_data_V_1_28 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_28;
        kernel_data_V_1_29 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_29;
        kernel_data_V_1_3 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_3;
        kernel_data_V_1_30 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_30;
        kernel_data_V_1_31 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_31;
        kernel_data_V_1_32 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_32;
        kernel_data_V_1_33 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_33;
        kernel_data_V_1_34 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_34;
        kernel_data_V_1_35 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_35;
        kernel_data_V_1_4 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_12;
        kernel_data_V_1_5 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_13;
        kernel_data_V_1_6 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_14;
        kernel_data_V_1_7 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_15;
        kernel_data_V_1_8 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_16;
        kernel_data_V_1_9 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_return_17;
        pX_2_load_reg_1363 <= pX_2;
        pY_2_load_reg_1357 <= pY_2;
        sX_2_load_reg_1337 <= sX_2;
        sY_2_load_reg_1347 <= sY_2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12))) begin
        icmp_ln293_reg_1489 <= icmp_ln293_fu_1226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1226_p2 == 1'd1))) begin
        icmp_ln297_reg_1498 <= icmp_ln297_fu_1266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_1388 <= icmp_ln64_fu_961_p2;
        icmp_ln64_reg_1388_pp0_iter1_reg <= icmp_ln64_reg_1388;
        tmp_14_reg_1392 <= tmp_14_fu_1015_p38;
        tmp_15_reg_1402 <= {{w11_V_q0[63:32]}};
        tmp_16_reg_1407 <= {{w11_V_q0[95:64]}};
        tmp_17_reg_1412 <= {{w11_V_q0[112:96]}};
        trunc_ln76_reg_1397 <= trunc_ln76_fu_1093_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln64_reg_1388_pp0_iter2_reg <= icmp_ln64_reg_1388_pp0_iter1_reg;
        icmp_ln64_reg_1388_pp0_iter3_reg <= icmp_ln64_reg_1388_pp0_iter2_reg;
        icmp_ln64_reg_1388_pp0_iter4_reg <= icmp_ln64_reg_1388_pp0_iter3_reg;
        icmp_ln64_reg_1388_pp0_iter5_reg <= icmp_ln64_reg_1388_pp0_iter4_reg;
        icmp_ln64_reg_1388_pp0_iter6_reg <= icmp_ln64_reg_1388_pp0_iter5_reg;
        trunc_ln708_2_reg_1455 <= {{grp_fu_1151_p2[47:16]}};
        trunc_ln708_3_reg_1460 <= {{grp_fu_1160_p2[47:16]}};
        trunc_ln708_s_reg_1450 <= {{grp_fu_1142_p2[47:16]}};
        trunc_ln_reg_1445 <= {{grp_fu_1133_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln293_reg_1489 == 1'd1))) begin
        sY_2 <= ap_phi_mux_storemerge_i_i_phi_fu_315_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (icmp_ln297_fu_1266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1226_p2 == 1'd1))) begin
        select_ln303_reg_1502 <= select_ln303_fu_1287_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (icmp_ln293_fu_1226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        select_ln308_reg_1493 <= select_ln308_fu_1247_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        tmp_data_0_V_reg_1317 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_1322 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_1327 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_1332 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_index_reg_1383 <= w_index_fu_955_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1311_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln297_reg_1498 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln293_reg_1489 == 1'd1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_315_p4 = select_ln303_reg_1502;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_315_p4 = storemerge_i_i_reg_311;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_1388 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_index14_phi_fu_259_p4 = w_index_reg_1383;
    end else begin
        ap_phi_mux_w_index14_phi_fu_259_p4 = w_index14_reg_255;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_start = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config11_s_fu_322_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1311_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_10_reg_1369))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w11_V_ce0 = 1'b1;
    end else begin
        w11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_10_fu_938_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_1206_p2 = (trunc_ln_reg_1445 + res_out_0_V12_reg_267);

assign acc_1_V_fu_1211_p2 = (trunc_ln708_s_reg_1450 + res_out_1_V10_reg_278);

assign acc_2_V_fu_1216_p2 = (trunc_ln708_2_reg_1455 + res_out_2_V8_reg_289);

assign acc_3_V_fu_1221_p2 = (trunc_ln708_3_reg_1460 + tmp_data_3_V_716_reg_300);

assign add_ln301_fu_1271_p2 = (pY_2_load_reg_1357 + 32'd1);

assign add_ln303_fu_1282_p2 = (sY_2_load_reg_1347 + 32'd1);

assign add_ln306_fu_1231_p2 = (pX_2_load_reg_1363 + 32'd1);

assign add_ln308_fu_1242_p2 = (sX_2_load_reg_1337 + 32'd1);

assign add_ln78_fu_944_p2 = (indvar_flatten15_reg_243 + 6'd1);

assign and_ln272_10_fu_938_p2 = (and_ln272_fu_926_p2 & and_ln272_9_fu_932_p2);

assign and_ln272_9_fu_932_p2 = (icmp_ln272_15_fu_920_p2 & icmp_ln272_14_fu_900_p2);

assign and_ln272_fu_926_p2 = (icmp_ln272_fu_870_p2 & icmp_ln272_13_fu_880_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12 = ((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_288 = (~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12));
end

always @ (*) begin
    ap_condition_297 = (~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_10_reg_1369)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1226_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_1133_p1 = sext_ln1116_cast_fu_1127_p1;

assign grp_fu_1142_p1 = sext_ln1116_cast_fu_1127_p1;

assign grp_fu_1151_p1 = sext_ln1116_cast_fu_1127_p1;

assign grp_fu_1160_p0 = sext_ln1116_cast_fu_1127_p1;

assign icmp_ln272_13_fu_880_p2 = ((sY_2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln272_14_fu_900_p2 = (($signed(tmp_fu_890_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_15_fu_920_p2 = (($signed(tmp_8_fu_910_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_870_p2 = ((sX_2 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_1226_p2 = ((pX_2_load_reg_1363 == 32'd5) ? 1'b1 : 1'b0);

assign icmp_ln297_fu_1266_p2 = ((pY_2_load_reg_1357 == 32'd5) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_961_p2 = ((ap_phi_mux_w_index14_phi_fu_259_p4 == 6'd35) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1311_p2 = ((indvar_flatten15_reg_243 == 6'd35) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op23 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op238 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign res_V_data_0_V_din = acc_0_V_reg_1465;

assign res_V_data_1_V_din = acc_1_V_reg_1471;

assign res_V_data_2_V_din = acc_2_V_reg_1477;

assign res_V_data_3_V_din = acc_3_V_reg_1483;

assign select_ln303_fu_1287_p3 = ((icmp_ln272_13_reg_1352[0:0] === 1'b1) ? 32'd2 : add_ln303_fu_1282_p2);

assign select_ln308_fu_1247_p3 = ((icmp_ln272_reg_1342[0:0] === 1'b1) ? 32'd2 : add_ln308_fu_1242_p2);

assign sext_ln1116_cast_fu_1127_p1 = $signed(tmp_14_reg_1392);

assign start_out = real_start;

assign tmp_8_fu_910_p4 = {{pX_2[31:1]}};

assign tmp_fu_890_p4 = {{pY_2[31:1]}};

assign trunc_ln76_fu_1093_p1 = w11_V_q0[31:0];

assign w11_V_address0 = zext_ln76_fu_950_p1;

assign w_index_fu_955_p2 = (6'd1 + ap_phi_mux_w_index14_phi_fu_259_p4);

assign zext_ln76_fu_950_p1 = ap_phi_mux_w_index14_phi_fu_259_p4;

endmodule //conv_2d_cl_array_array_ap_fixed_4u_config11_s
