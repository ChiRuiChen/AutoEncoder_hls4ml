// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_array_array_ap_fixed_4u_config14_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_data_0_V_dout,
        data_V_data_0_V_empty_n,
        data_V_data_0_V_read,
        data_V_data_1_V_dout,
        data_V_data_1_V_empty_n,
        data_V_data_1_V_read,
        data_V_data_2_V_dout,
        data_V_data_2_V_empty_n,
        data_V_data_2_V_read,
        data_V_data_3_V_dout,
        data_V_data_3_V_empty_n,
        data_V_data_3_V_read,
        res_V_data_0_V_din,
        res_V_data_0_V_full_n,
        res_V_data_0_V_write,
        res_V_data_1_V_din,
        res_V_data_1_V_full_n,
        res_V_data_1_V_write,
        res_V_data_2_V_din,
        res_V_data_2_V_full_n,
        res_V_data_2_V_write,
        res_V_data_3_V_din,
        res_V_data_3_V_full_n,
        res_V_data_3_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_state12 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] data_V_data_0_V_dout;
input   data_V_data_0_V_empty_n;
output   data_V_data_0_V_read;
input  [31:0] data_V_data_1_V_dout;
input   data_V_data_1_V_empty_n;
output   data_V_data_1_V_read;
input  [31:0] data_V_data_2_V_dout;
input   data_V_data_2_V_empty_n;
output   data_V_data_2_V_read;
input  [31:0] data_V_data_3_V_dout;
input   data_V_data_3_V_empty_n;
output   data_V_data_3_V_read;
output  [31:0] res_V_data_0_V_din;
input   res_V_data_0_V_full_n;
output   res_V_data_0_V_write;
output  [31:0] res_V_data_1_V_din;
input   res_V_data_1_V_full_n;
output   res_V_data_1_V_write;
output  [31:0] res_V_data_2_V_din;
input   res_V_data_2_V_full_n;
output   res_V_data_2_V_write;
output  [31:0] res_V_data_3_V_din;
input   res_V_data_3_V_full_n;
output   res_V_data_3_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_data_0_V_read;
reg data_V_data_1_V_read;
reg data_V_data_2_V_read;
reg data_V_data_3_V_read;
reg res_V_data_0_V_write;
reg res_V_data_1_V_write;
reg res_V_data_2_V_write;
reg res_V_data_3_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] kernel_data_V_2_0;
reg   [31:0] kernel_data_V_2_1;
reg   [31:0] kernel_data_V_2_2;
reg   [31:0] kernel_data_V_2_3;
reg   [31:0] kernel_data_V_2_4;
reg   [31:0] kernel_data_V_2_5;
reg   [31:0] kernel_data_V_2_6;
reg   [31:0] kernel_data_V_2_7;
reg   [31:0] kernel_data_V_2_8;
reg   [31:0] kernel_data_V_2_9;
reg   [31:0] kernel_data_V_2_10;
reg   [31:0] kernel_data_V_2_11;
reg   [31:0] kernel_data_V_2_12;
reg   [31:0] kernel_data_V_2_13;
reg   [31:0] kernel_data_V_2_14;
reg   [31:0] kernel_data_V_2_15;
reg   [31:0] kernel_data_V_2_16;
reg   [31:0] kernel_data_V_2_17;
reg   [31:0] kernel_data_V_2_18;
reg   [31:0] kernel_data_V_2_19;
reg   [31:0] kernel_data_V_2_20;
reg   [31:0] kernel_data_V_2_21;
reg   [31:0] kernel_data_V_2_22;
reg   [31:0] kernel_data_V_2_23;
reg   [31:0] kernel_data_V_2_24;
reg   [31:0] kernel_data_V_2_25;
reg   [31:0] kernel_data_V_2_26;
reg   [31:0] kernel_data_V_2_27;
reg   [31:0] kernel_data_V_2_28;
reg   [31:0] kernel_data_V_2_29;
reg   [31:0] kernel_data_V_2_30;
reg   [31:0] kernel_data_V_2_31;
reg   [31:0] kernel_data_V_2_32;
reg   [31:0] kernel_data_V_2_33;
reg   [31:0] kernel_data_V_2_34;
reg   [31:0] kernel_data_V_2_35;
wire   [5:0] w14_V_address0;
reg    w14_V_ce0;
wire   [112:0] w14_V_q0;
reg   [31:0] pX_1;
reg   [31:0] sX_1;
reg   [31:0] pY_1;
reg   [31:0] sY_1;
reg    data_V_data_0_V_blk_n;
wire    ap_CS_fsm_state2;
reg    data_V_data_1_V_blk_n;
reg    data_V_data_2_V_blk_n;
reg    data_V_data_3_V_blk_n;
reg    res_V_data_0_V_blk_n;
wire    ap_CS_fsm_state12;
reg   [0:0] and_ln272_8_reg_1377;
reg    res_V_data_1_V_blk_n;
reg    res_V_data_2_V_blk_n;
reg    res_V_data_3_V_blk_n;
reg   [5:0] w_index14_reg_263;
reg   [31:0] res_out_0_V12_reg_275;
reg   [31:0] res_out_1_V10_reg_286;
reg   [31:0] res_out_2_V8_reg_297;
reg   [31:0] tmp_data_3_V_706_reg_308;
reg   [31:0] tmp_data_0_V_reg_1325;
wire    io_acc_block_signal_op23;
reg   [31:0] tmp_data_1_V_reg_1330;
reg   [31:0] tmp_data_2_V_reg_1335;
reg   [31:0] tmp_data_3_V_reg_1340;
reg   [31:0] sX_1_load_reg_1345;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln272_fu_878_p2;
reg   [0:0] icmp_ln272_reg_1350;
reg   [31:0] sY_1_load_reg_1355;
wire   [0:0] icmp_ln272_10_fu_888_p2;
reg   [0:0] icmp_ln272_10_reg_1360;
reg   [31:0] pY_1_load_reg_1365;
reg   [31:0] pX_1_load_reg_1371;
wire   [0:0] and_ln272_8_fu_946_p2;
wire   [6:0] add_ln78_fu_952_p2;
reg   [6:0] add_ln78_reg_1381;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] w_index_fu_963_p2;
reg   [5:0] w_index_reg_1391;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln64_fu_969_p2;
reg   [0:0] icmp_ln64_reg_1396;
reg   [0:0] icmp_ln64_reg_1396_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_1396_pp0_iter2_reg;
reg   [0:0] icmp_ln64_reg_1396_pp0_iter3_reg;
reg   [0:0] icmp_ln64_reg_1396_pp0_iter4_reg;
reg   [0:0] icmp_ln64_reg_1396_pp0_iter5_reg;
reg   [0:0] icmp_ln64_reg_1396_pp0_iter6_reg;
wire   [31:0] tmp_10_fu_1023_p38;
reg   [31:0] tmp_10_reg_1400;
wire   [31:0] trunc_ln76_fu_1101_p1;
reg  signed [31:0] trunc_ln76_reg_1405;
reg  signed [31:0] tmp_11_reg_1410;
reg  signed [31:0] tmp_12_reg_1415;
reg  signed [16:0] tmp_13_reg_1420;
wire  signed [47:0] sext_ln1116_cast_fu_1135_p1;
reg   [31:0] trunc_ln_reg_1453;
reg   [31:0] trunc_ln708_s_reg_1458;
reg   [31:0] trunc_ln708_9_reg_1463;
reg   [31:0] trunc_ln708_1_reg_1468;
wire   [31:0] acc_0_V_fu_1214_p2;
reg   [31:0] acc_0_V_reg_1473;
reg    ap_enable_reg_pp0_iter7;
wire   [31:0] acc_1_V_fu_1219_p2;
reg   [31:0] acc_1_V_reg_1479;
wire   [31:0] acc_2_V_fu_1224_p2;
reg   [31:0] acc_2_V_reg_1485;
wire   [31:0] acc_3_V_fu_1229_p2;
reg   [31:0] acc_3_V_reg_1491;
wire   [0:0] icmp_ln293_fu_1234_p2;
reg   [0:0] icmp_ln293_reg_1497;
wire    io_acc_block_signal_op238;
reg    ap_block_state12;
wire   [31:0] select_ln308_fu_1255_p3;
reg   [31:0] select_ln308_reg_1501;
wire   [0:0] icmp_ln297_fu_1274_p2;
reg   [0:0] icmp_ln297_reg_1506;
wire   [31:0] select_ln303_fu_1295_p3;
reg   [31:0] select_ln303_reg_1510;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_start;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_done;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_idle;
wire    call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_ready;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_0;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_1;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_2;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_3;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_4;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_5;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_6;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_7;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_8;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_9;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_10;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_11;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_12;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_13;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_14;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_15;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_16;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_17;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_18;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_19;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_20;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_21;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_22;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_23;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_24;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_25;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_26;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_27;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_28;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_29;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_30;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_31;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_32;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_33;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_34;
wire   [31:0] call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_35;
reg   [6:0] indvar_flatten15_reg_251;
reg    ap_block_state1;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln78_fu_1319_p2;
reg   [5:0] ap_phi_mux_w_index14_phi_fu_267_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_323_p4;
reg   [31:0] storemerge_i_i_reg_319;
wire   [63:0] zext_ln76_fu_958_p1;
wire   [31:0] add_ln306_fu_1239_p2;
wire   [31:0] add_ln301_fu_1279_p2;
wire   [30:0] tmp_fu_898_p4;
wire   [30:0] tmp_7_fu_918_p4;
wire   [0:0] icmp_ln272_12_fu_908_p2;
wire   [0:0] icmp_ln272_13_fu_928_p2;
wire   [0:0] and_ln272_7_fu_940_p2;
wire   [0:0] and_ln272_fu_934_p2;
wire  signed [31:0] grp_fu_1141_p1;
wire  signed [31:0] grp_fu_1150_p1;
wire  signed [31:0] grp_fu_1159_p1;
wire  signed [31:0] grp_fu_1168_p0;
wire   [47:0] grp_fu_1141_p2;
wire   [47:0] grp_fu_1150_p2;
wire   [47:0] grp_fu_1159_p2;
wire   [47:0] grp_fu_1168_p2;
wire   [31:0] add_ln308_fu_1250_p2;
wire   [31:0] add_ln303_fu_1290_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_288;
reg    ap_condition_297;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 kernel_data_V_2_0 = 32'd0;
#0 kernel_data_V_2_1 = 32'd0;
#0 kernel_data_V_2_2 = 32'd0;
#0 kernel_data_V_2_3 = 32'd0;
#0 kernel_data_V_2_4 = 32'd0;
#0 kernel_data_V_2_5 = 32'd0;
#0 kernel_data_V_2_6 = 32'd0;
#0 kernel_data_V_2_7 = 32'd0;
#0 kernel_data_V_2_8 = 32'd0;
#0 kernel_data_V_2_9 = 32'd0;
#0 kernel_data_V_2_10 = 32'd0;
#0 kernel_data_V_2_11 = 32'd0;
#0 kernel_data_V_2_12 = 32'd0;
#0 kernel_data_V_2_13 = 32'd0;
#0 kernel_data_V_2_14 = 32'd0;
#0 kernel_data_V_2_15 = 32'd0;
#0 kernel_data_V_2_16 = 32'd0;
#0 kernel_data_V_2_17 = 32'd0;
#0 kernel_data_V_2_18 = 32'd0;
#0 kernel_data_V_2_19 = 32'd0;
#0 kernel_data_V_2_20 = 32'd0;
#0 kernel_data_V_2_21 = 32'd0;
#0 kernel_data_V_2_22 = 32'd0;
#0 kernel_data_V_2_23 = 32'd0;
#0 kernel_data_V_2_24 = 32'd0;
#0 kernel_data_V_2_25 = 32'd0;
#0 kernel_data_V_2_26 = 32'd0;
#0 kernel_data_V_2_27 = 32'd0;
#0 kernel_data_V_2_28 = 32'd0;
#0 kernel_data_V_2_29 = 32'd0;
#0 kernel_data_V_2_30 = 32'd0;
#0 kernel_data_V_2_31 = 32'd0;
#0 kernel_data_V_2_32 = 32'd0;
#0 kernel_data_V_2_33 = 32'd0;
#0 kernel_data_V_2_34 = 32'd0;
#0 kernel_data_V_2_35 = 32'd0;
#0 pX_1 = 32'd0;
#0 sX_1 = 32'd0;
#0 pY_1 = 32'd0;
#0 sY_1 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V #(
    .DataWidth( 113 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
w14_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w14_V_address0),
    .ce0(w14_V_ce0),
    .q0(w14_V_q0)
);

shift_line_buffer_array_ap_fixed_4u_config14_s call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_start),
    .ap_done(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_done),
    .ap_idle(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_idle),
    .ap_ready(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_ready),
    .in_elem_data_0_V_read(tmp_data_0_V_reg_1325),
    .in_elem_data_1_V_read(tmp_data_1_V_reg_1330),
    .in_elem_data_2_V_read(tmp_data_2_V_reg_1335),
    .in_elem_data_3_V_read(tmp_data_3_V_reg_1340),
    .kernel_window_4_V_read(kernel_data_V_2_4),
    .kernel_window_5_V_read(kernel_data_V_2_5),
    .kernel_window_6_V_read(kernel_data_V_2_6),
    .kernel_window_7_V_read(kernel_data_V_2_7),
    .kernel_window_8_V_read(kernel_data_V_2_8),
    .kernel_window_9_V_read(kernel_data_V_2_9),
    .kernel_window_10_V_read(kernel_data_V_2_10),
    .kernel_window_11_V_read(kernel_data_V_2_11),
    .kernel_window_16_V_read(kernel_data_V_2_16),
    .kernel_window_17_V_read(kernel_data_V_2_17),
    .kernel_window_18_V_read(kernel_data_V_2_18),
    .kernel_window_19_V_read(kernel_data_V_2_19),
    .kernel_window_20_V_read(kernel_data_V_2_20),
    .kernel_window_21_V_read(kernel_data_V_2_21),
    .kernel_window_22_V_read(kernel_data_V_2_22),
    .kernel_window_23_V_read(kernel_data_V_2_23),
    .kernel_window_28_V_read(kernel_data_V_2_28),
    .kernel_window_29_V_read(kernel_data_V_2_29),
    .kernel_window_30_V_read(kernel_data_V_2_30),
    .kernel_window_31_V_read(kernel_data_V_2_31),
    .kernel_window_32_V_read(kernel_data_V_2_32),
    .kernel_window_33_V_read(kernel_data_V_2_33),
    .kernel_window_34_V_read(kernel_data_V_2_34),
    .kernel_window_35_V_read(kernel_data_V_2_35),
    .ap_return_0(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_0),
    .ap_return_1(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_1),
    .ap_return_2(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_2),
    .ap_return_3(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_3),
    .ap_return_4(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_4),
    .ap_return_5(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_5),
    .ap_return_6(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_6),
    .ap_return_7(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_7),
    .ap_return_8(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_8),
    .ap_return_9(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_9),
    .ap_return_10(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_10),
    .ap_return_11(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_11),
    .ap_return_12(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_12),
    .ap_return_13(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_13),
    .ap_return_14(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_14),
    .ap_return_15(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_15),
    .ap_return_16(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_16),
    .ap_return_17(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_17),
    .ap_return_18(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_18),
    .ap_return_19(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_19),
    .ap_return_20(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_20),
    .ap_return_21(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_21),
    .ap_return_22(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_22),
    .ap_return_23(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_23),
    .ap_return_24(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_24),
    .ap_return_25(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_25),
    .ap_return_26(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_26),
    .ap_return_27(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_27),
    .ap_return_28(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_28),
    .ap_return_29(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_29),
    .ap_return_30(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_30),
    .ap_return_31(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_31),
    .ap_return_32(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_32),
    .ap_return_33(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_33),
    .ap_return_34(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_34),
    .ap_return_35(call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_35)
);

myproject_axi_mux_366_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
myproject_axi_mux_366_32_1_1_U405(
    .din0(kernel_data_V_2_0),
    .din1(kernel_data_V_2_1),
    .din2(kernel_data_V_2_2),
    .din3(kernel_data_V_2_3),
    .din4(kernel_data_V_2_4),
    .din5(kernel_data_V_2_5),
    .din6(kernel_data_V_2_6),
    .din7(kernel_data_V_2_7),
    .din8(kernel_data_V_2_8),
    .din9(kernel_data_V_2_9),
    .din10(kernel_data_V_2_10),
    .din11(kernel_data_V_2_11),
    .din12(kernel_data_V_2_12),
    .din13(kernel_data_V_2_13),
    .din14(kernel_data_V_2_14),
    .din15(kernel_data_V_2_15),
    .din16(kernel_data_V_2_16),
    .din17(kernel_data_V_2_17),
    .din18(kernel_data_V_2_18),
    .din19(kernel_data_V_2_19),
    .din20(kernel_data_V_2_20),
    .din21(kernel_data_V_2_21),
    .din22(kernel_data_V_2_22),
    .din23(kernel_data_V_2_23),
    .din24(kernel_data_V_2_24),
    .din25(kernel_data_V_2_25),
    .din26(kernel_data_V_2_26),
    .din27(kernel_data_V_2_27),
    .din28(kernel_data_V_2_28),
    .din29(kernel_data_V_2_29),
    .din30(kernel_data_V_2_30),
    .din31(kernel_data_V_2_31),
    .din32(kernel_data_V_2_32),
    .din33(kernel_data_V_2_33),
    .din34(kernel_data_V_2_34),
    .din35(kernel_data_V_2_35),
    .din36(w_index14_reg_263),
    .dout(tmp_10_fu_1023_p38)
);

myproject_axi_mul_32s_32s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_32s_48_5_1_U406(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(trunc_ln76_reg_1405),
    .din1(grp_fu_1141_p1),
    .ce(1'b1),
    .dout(grp_fu_1141_p2)
);

myproject_axi_mul_32s_32s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_32s_48_5_1_U407(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_reg_1410),
    .din1(grp_fu_1150_p1),
    .ce(1'b1),
    .dout(grp_fu_1150_p2)
);

myproject_axi_mul_32s_32s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_32s_48_5_1_U408(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_12_reg_1415),
    .din1(grp_fu_1159_p1),
    .ce(1'b1),
    .dout(grp_fu_1159_p2)
);

myproject_axi_mul_32s_17s_48_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 48 ))
myproject_axi_mul_32s_17s_48_5_1_U409(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1168_p0),
    .din1(tmp_13_reg_1420),
    .ce(1'b1),
    .dout(grp_fu_1168_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1319_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_969_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_1319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        indvar_flatten15_reg_251 <= add_ln78_reg_1381;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten15_reg_251 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_288)) begin
        if ((icmp_ln293_fu_1234_p2 == 1'd1)) begin
            pX_1 <= 32'd0;
        end else if ((icmp_ln293_fu_1234_p2 == 1'd0)) begin
            pX_1 <= add_ln306_fu_1239_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_297)) begin
        if ((icmp_ln297_fu_1274_p2 == 1'd1)) begin
            pY_1 <= 32'd0;
        end else if ((icmp_ln297_fu_1274_p2 == 1'd0)) begin
            pY_1 <= add_ln301_fu_1279_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1396_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        res_out_0_V12_reg_275 <= acc_0_V_fu_1214_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
        res_out_0_V12_reg_275 <= 32'd4294966963;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1396_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        res_out_1_V10_reg_286 <= acc_1_V_fu_1219_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
        res_out_1_V10_reg_286 <= 32'd4294966337;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1396_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        res_out_2_V8_reg_297 <= acc_2_V_fu_1224_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
        res_out_2_V8_reg_297 <= 32'd2425;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_reg_1497 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        sX_1 <= select_ln308_reg_1501;
    end else if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1234_p2 == 1'd1))) begin
        sX_1 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln297_fu_1274_p2 == 1'd1) & (icmp_ln293_fu_1234_p2 == 1'd1))) begin
        storemerge_i_i_reg_319 <= 32'd0;
    end else if (((icmp_ln297_reg_1506 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln293_reg_1497 == 1'd1))) begin
        storemerge_i_i_reg_319 <= select_ln303_reg_1510;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1396_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        tmp_data_3_V_706_reg_308 <= acc_3_V_fu_1229_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
        tmp_data_3_V_706_reg_308 <= 32'd11406;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_1396 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_index14_reg_263 <= w_index_reg_1391;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
        w_index14_reg_263 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        acc_0_V_reg_1473 <= acc_0_V_fu_1214_p2;
        acc_1_V_reg_1479 <= acc_1_V_fu_1219_p2;
        acc_2_V_reg_1485 <= acc_2_V_fu_1224_p2;
        acc_3_V_reg_1491 <= acc_3_V_fu_1229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln78_reg_1381 <= add_ln78_fu_952_p2;
        and_ln272_8_reg_1377 <= and_ln272_8_fu_946_p2;
        icmp_ln272_10_reg_1360 <= icmp_ln272_10_fu_888_p2;
        icmp_ln272_reg_1350 <= icmp_ln272_fu_878_p2;
        kernel_data_V_2_0 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_0;
        kernel_data_V_2_1 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_1;
        kernel_data_V_2_10 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_18;
        kernel_data_V_2_11 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_19;
        kernel_data_V_2_12 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_4;
        kernel_data_V_2_13 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_5;
        kernel_data_V_2_14 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_6;
        kernel_data_V_2_15 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_7;
        kernel_data_V_2_16 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_20;
        kernel_data_V_2_17 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_21;
        kernel_data_V_2_18 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_22;
        kernel_data_V_2_19 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_23;
        kernel_data_V_2_2 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_2;
        kernel_data_V_2_20 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_24;
        kernel_data_V_2_21 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_25;
        kernel_data_V_2_22 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_26;
        kernel_data_V_2_23 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_27;
        kernel_data_V_2_24 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_8;
        kernel_data_V_2_25 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_9;
        kernel_data_V_2_26 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_10;
        kernel_data_V_2_27 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_11;
        kernel_data_V_2_28 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_28;
        kernel_data_V_2_29 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_29;
        kernel_data_V_2_3 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_3;
        kernel_data_V_2_30 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_30;
        kernel_data_V_2_31 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_31;
        kernel_data_V_2_32 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_32;
        kernel_data_V_2_33 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_33;
        kernel_data_V_2_34 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_34;
        kernel_data_V_2_35 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_35;
        kernel_data_V_2_4 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_12;
        kernel_data_V_2_5 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_13;
        kernel_data_V_2_6 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_14;
        kernel_data_V_2_7 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_15;
        kernel_data_V_2_8 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_16;
        kernel_data_V_2_9 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_return_17;
        pX_1_load_reg_1371 <= pX_1;
        pY_1_load_reg_1365 <= pY_1;
        sX_1_load_reg_1345 <= sX_1;
        sY_1_load_reg_1355 <= sY_1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12))) begin
        icmp_ln293_reg_1497 <= icmp_ln293_fu_1234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1234_p2 == 1'd1))) begin
        icmp_ln297_reg_1506 <= icmp_ln297_fu_1274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_1396 <= icmp_ln64_fu_969_p2;
        icmp_ln64_reg_1396_pp0_iter1_reg <= icmp_ln64_reg_1396;
        tmp_10_reg_1400 <= tmp_10_fu_1023_p38;
        tmp_11_reg_1410 <= {{w14_V_q0[63:32]}};
        tmp_12_reg_1415 <= {{w14_V_q0[95:64]}};
        tmp_13_reg_1420 <= {{w14_V_q0[112:96]}};
        trunc_ln76_reg_1405 <= trunc_ln76_fu_1101_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln64_reg_1396_pp0_iter2_reg <= icmp_ln64_reg_1396_pp0_iter1_reg;
        icmp_ln64_reg_1396_pp0_iter3_reg <= icmp_ln64_reg_1396_pp0_iter2_reg;
        icmp_ln64_reg_1396_pp0_iter4_reg <= icmp_ln64_reg_1396_pp0_iter3_reg;
        icmp_ln64_reg_1396_pp0_iter5_reg <= icmp_ln64_reg_1396_pp0_iter4_reg;
        icmp_ln64_reg_1396_pp0_iter6_reg <= icmp_ln64_reg_1396_pp0_iter5_reg;
        trunc_ln708_1_reg_1468 <= {{grp_fu_1168_p2[47:16]}};
        trunc_ln708_9_reg_1463 <= {{grp_fu_1159_p2[47:16]}};
        trunc_ln708_s_reg_1458 <= {{grp_fu_1150_p2[47:16]}};
        trunc_ln_reg_1453 <= {{grp_fu_1141_p2[47:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln293_reg_1497 == 1'd1))) begin
        sY_1 <= ap_phi_mux_storemerge_i_i_phi_fu_323_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (icmp_ln297_fu_1274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1234_p2 == 1'd1))) begin
        select_ln303_reg_1510 <= select_ln303_fu_1295_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (icmp_ln293_fu_1234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        select_ln308_reg_1501 <= select_ln308_fu_1255_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        tmp_data_0_V_reg_1325 <= data_V_data_0_V_dout;
        tmp_data_1_V_reg_1330 <= data_V_data_1_V_dout;
        tmp_data_2_V_reg_1335 <= data_V_data_2_V_dout;
        tmp_data_3_V_reg_1340 <= data_V_data_3_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_index_reg_1391 <= w_index_fu_963_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1319_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln297_reg_1506 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln293_reg_1497 == 1'd1))) begin
        ap_phi_mux_storemerge_i_i_phi_fu_323_p4 = select_ln303_reg_1510;
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_323_p4 = storemerge_i_i_reg_319;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_reg_1396 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_index14_phi_fu_267_p4 = w_index_reg_1391;
    end else begin
        ap_phi_mux_w_index14_phi_fu_267_p4 = w_index14_reg_263;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_start = 1'b1;
    end else begin
        call_ret_shift_line_buffer_array_ap_fixed_4u_config14_s_fu_330_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_0_V_blk_n = data_V_data_0_V_empty_n;
    end else begin
        data_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_0_V_read = 1'b1;
    end else begin
        data_V_data_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_1_V_blk_n = data_V_data_1_V_empty_n;
    end else begin
        data_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_1_V_read = 1'b1;
    end else begin
        data_V_data_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_2_V_blk_n = data_V_data_2_V_empty_n;
    end else begin
        data_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_2_V_read = 1'b1;
    end else begin
        data_V_data_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_data_3_V_blk_n = data_V_data_3_V_empty_n;
    end else begin
        data_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
        data_V_data_3_V_read = 1'b1;
    end else begin
        data_V_data_3_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1319_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_0_V_blk_n = res_V_data_0_V_full_n;
    end else begin
        res_V_data_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_0_V_write = 1'b1;
    end else begin
        res_V_data_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_1_V_blk_n = res_V_data_1_V_full_n;
    end else begin
        res_V_data_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_1_V_write = 1'b1;
    end else begin
        res_V_data_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_2_V_blk_n = res_V_data_2_V_full_n;
    end else begin
        res_V_data_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_2_V_write = 1'b1;
    end else begin
        res_V_data_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_3_V_blk_n = res_V_data_3_V_full_n;
    end else begin
        res_V_data_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (1'd1 == and_ln272_8_reg_1377))) begin
        res_V_data_3_V_write = 1'b1;
    end else begin
        res_V_data_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w14_V_ce0 = 1'b1;
    end else begin
        w14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (io_acc_block_signal_op23 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln272_8_fu_946_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln78_fu_1319_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_1214_p2 = (trunc_ln_reg_1453 + res_out_0_V12_reg_275);

assign acc_1_V_fu_1219_p2 = (trunc_ln708_s_reg_1458 + res_out_1_V10_reg_286);

assign acc_2_V_fu_1224_p2 = (trunc_ln708_9_reg_1463 + res_out_2_V8_reg_297);

assign acc_3_V_fu_1229_p2 = (trunc_ln708_1_reg_1468 + tmp_data_3_V_706_reg_308);

assign add_ln301_fu_1279_p2 = (pY_1_load_reg_1365 + 32'd1);

assign add_ln303_fu_1290_p2 = (sY_1_load_reg_1355 + 32'd1);

assign add_ln306_fu_1239_p2 = (pX_1_load_reg_1371 + 32'd1);

assign add_ln308_fu_1250_p2 = (sX_1_load_reg_1345 + 32'd1);

assign add_ln78_fu_952_p2 = (indvar_flatten15_reg_251 + 7'd1);

assign and_ln272_7_fu_940_p2 = (icmp_ln272_13_fu_928_p2 & icmp_ln272_12_fu_908_p2);

assign and_ln272_8_fu_946_p2 = (and_ln272_fu_934_p2 & and_ln272_7_fu_940_p2);

assign and_ln272_fu_934_p2 = (icmp_ln272_fu_878_p2 & icmp_ln272_10_fu_888_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12 = ((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_288 = (~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12));
end

always @ (*) begin
    ap_condition_297 = (~((io_acc_block_signal_op238 == 1'b0) & (1'd1 == and_ln272_8_reg_1377)) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln293_fu_1234_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_1141_p1 = sext_ln1116_cast_fu_1135_p1;

assign grp_fu_1150_p1 = sext_ln1116_cast_fu_1135_p1;

assign grp_fu_1159_p1 = sext_ln1116_cast_fu_1135_p1;

assign grp_fu_1168_p0 = sext_ln1116_cast_fu_1135_p1;

assign icmp_ln272_10_fu_888_p2 = ((sY_1 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln272_12_fu_908_p2 = (($signed(tmp_fu_898_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_13_fu_928_p2 = (($signed(tmp_7_fu_918_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln272_fu_878_p2 = ((sX_1 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_1234_p2 = ((pX_1_load_reg_1371 == 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln297_fu_1274_p2 = ((pY_1_load_reg_1365 == 32'd9) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_969_p2 = ((ap_phi_mux_w_index14_phi_fu_267_p4 == 6'd35) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1319_p2 = ((indvar_flatten15_reg_251 == 7'd99) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op23 = (data_V_data_3_V_empty_n & data_V_data_2_V_empty_n & data_V_data_1_V_empty_n & data_V_data_0_V_empty_n);

assign io_acc_block_signal_op238 = (res_V_data_3_V_full_n & res_V_data_2_V_full_n & res_V_data_1_V_full_n & res_V_data_0_V_full_n);

assign res_V_data_0_V_din = acc_0_V_reg_1473;

assign res_V_data_1_V_din = acc_1_V_reg_1479;

assign res_V_data_2_V_din = acc_2_V_reg_1485;

assign res_V_data_3_V_din = acc_3_V_reg_1491;

assign select_ln303_fu_1295_p3 = ((icmp_ln272_10_reg_1360[0:0] === 1'b1) ? 32'd2 : add_ln303_fu_1290_p2);

assign select_ln308_fu_1255_p3 = ((icmp_ln272_reg_1350[0:0] === 1'b1) ? 32'd2 : add_ln308_fu_1250_p2);

assign sext_ln1116_cast_fu_1135_p1 = $signed(tmp_10_reg_1400);

assign start_out = real_start;

assign tmp_7_fu_918_p4 = {{pX_1[31:1]}};

assign tmp_fu_898_p4 = {{pY_1[31:1]}};

assign trunc_ln76_fu_1101_p1 = w14_V_q0[31:0];

assign w14_V_address0 = zext_ln76_fu_958_p1;

assign w_index_fu_963_p2 = (6'd1 + ap_phi_mux_w_index14_phi_fu_267_p4);

assign zext_ln76_fu_958_p1 = ap_phi_mux_w_index14_phi_fu_267_p4;

endmodule //conv_2d_cl_array_array_ap_fixed_4u_config14_s
