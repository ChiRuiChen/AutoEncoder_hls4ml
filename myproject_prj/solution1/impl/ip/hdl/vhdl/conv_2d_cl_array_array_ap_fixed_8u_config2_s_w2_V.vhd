-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_rom is 
    generic(
             DWIDTH     : integer := 238; 
             AWIDTH     : integer := 4; 
             MEM_SIZE    : integer := 9
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1100010001111111111111111111111111111101100111111111111111111111100110100101110000000000000000001100001011011111111111111111111101110100000100111111111111111111111011000101110000000000000000000101111101111111111111111111111101111011001110", 
    1 => "1110010010001111111111111111111100000001001000111111111111111111111111111011111111111111111111111110000001000011111111111111111101010010000010000000000000000000000111010010000000000000000000000101100111100011111111111111111101011111011010", 
    2 => "1010000010111100000000000000000000100010000111000000000000000001000110100010110000000000000000000001010111011111111111111111111110000111111111111111111111111111001011001111100000000000000000001000000100110011111111111111111101100000111010", 
    3 => "1011000000010100000000000000000000010011011001111111111111111111111011010010111111111111111111101100011001100011111111111111111110010011001101000000000000000000001011001110010000000000000000001001100111111011111111111111111101100110101111", 
    4 => "1010011101001000000000000000000101011010010011000000000000000000010111101000010000000000000000000111000110110100000000000000000100001010010100000000000000000000011000110010000000000000000000000101010101010000000000000000000001001110011001", 
    5 => "1010101110000011111111111111111111110001000011111111111111111111000011110100011111111111111111111101001000011111111111111111111101110111000110111111111111111111011001011010100000000000000000001000100100010011111111111111111101011000111000", 
    6 => "1000111000101011111111111111111111110110101110111111111111111111111000110111100000000000000000001010000111111111111111111111111101011101001010000000000000000001000011100110000000000000000000001001011101111011111111111111111100111011111101", 
    7 => "1100110111110111111111111111111101000111111011000000000000000000000101100100001111111111111111111101100100101011111111111111111101011110011100000000000000000000101101110111000000000000000000000101001100111011111111111111111101101100101010", 
    8 => "1100011101011100000000000000000000000010010010000000000000000000101111001111100000000000000000000001101110111011111111111111111101101100101001111111111111111111100111011100100000000000000000000100111000111011111111111111111101101110010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V is
    generic (
        DataWidth : INTEGER := 238;
        AddressRange : INTEGER := 9;
        AddressWidth : INTEGER := 4);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V is
    component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_rom_U :  component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


