-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pooling2d_cl_array_array_ap_fixed_4u_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_data_0_V_empty_n : IN STD_LOGIC;
    data_V_data_0_V_read : OUT STD_LOGIC;
    data_V_data_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_data_1_V_empty_n : IN STD_LOGIC;
    data_V_data_1_V_read : OUT STD_LOGIC;
    data_V_data_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_data_2_V_empty_n : IN STD_LOGIC;
    data_V_data_2_V_read : OUT STD_LOGIC;
    data_V_data_3_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_data_3_V_empty_n : IN STD_LOGIC;
    data_V_data_3_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC );
end;


architecture behav of pooling2d_cl_array_array_ap_fixed_4u_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal pX_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln233_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_data_1_V_blk_n : STD_LOGIC;
    signal data_V_data_2_V_blk_n : STD_LOGIC;
    signal data_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln185_6_reg_754 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_124 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln233_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op119 : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln233_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln233_fu_176_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln233_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_data_0_V_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal io_acc_block_signal_op21 : STD_LOGIC;
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_data_1_V_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_2_V_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_3_V_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_2_V_10_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_2_V_2_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_2_V_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_2_V_3_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_0_V_10_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_0_V_2_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_0_V_reg_704 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_0_V_3_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_1_V_10_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_1_V_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_1_V_2_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_1_V_3_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_3_V_10_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_3_V_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_3_V_2_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool_window_3_V_3_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln185_6_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_35_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_35_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_37_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_37_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_38_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_38_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_40_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_40_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_41_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_41_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_43_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_43_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_44_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1496_44_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln218_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln218_reg_802 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln207_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln213_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln213_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_34_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_34_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_1_V_32_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_1_V_32_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_2_V_32_fu_596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_2_V_32_reg_826 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_3_V_32_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_3_V_32_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_done : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_idle : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ready : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_12 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_13 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_14 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_15 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ce : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0_ignore_call18 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call18 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2_ignore_call18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp34 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_128_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_i_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_i_i_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start_reg : STD_LOGIC := '0';
    signal add_ln216_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln211_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_sY_5_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln185_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_7_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_8_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_9_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_5_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln185_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln218_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln213_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_35_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_36_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_37_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_38_fu_561_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_39_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_40_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_41_fu_585_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_42_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln86_43_fu_604_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln86_44_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1496_45_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_326 : BOOLEAN;
    signal ap_condition_330 : BOOLEAN;
    signal ap_condition_321 : BOOLEAN;
    signal ap_condition_311 : BOOLEAN;
    signal ap_condition_235 : BOOLEAN;
    signal ap_condition_886 : BOOLEAN;
    signal ap_condition_229 : BOOLEAN;
    signal ap_condition_891 : BOOLEAN;

    component shift_line_buffer_array_ap_fixed_4u_config10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_elem_data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        in_elem_data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        in_elem_data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        in_elem_data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_6_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_12_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_13_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_14_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_15_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146 : component shift_line_buffer_array_ap_fixed_4u_config10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start,
        ap_done => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_done,
        ap_idle => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_idle,
        ap_ready => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ready,
        in_elem_data_0_V_read => tmp_data_0_V_reg_654,
        in_elem_data_1_V_read => tmp_data_1_V_reg_659,
        in_elem_data_2_V_read => tmp_data_2_V_reg_664,
        in_elem_data_3_V_read => tmp_data_3_V_reg_669,
        kernel_window_4_V_read => kernel_data_V_7_4,
        kernel_window_5_V_read => kernel_data_V_7_5,
        kernel_window_6_V_read => kernel_data_V_7_6,
        kernel_window_7_V_read => kernel_data_V_7_7,
        kernel_window_12_V_read => kernel_data_V_7_12,
        kernel_window_13_V_read => kernel_data_V_7_13,
        kernel_window_14_V_read => kernel_data_V_7_14,
        kernel_window_15_V_read => kernel_data_V_7_15,
        ap_return_0 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_0,
        ap_return_1 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_1,
        ap_return_2 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_2,
        ap_return_3 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_3,
        ap_return_4 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_4,
        ap_return_5 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_5,
        ap_return_6 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_6,
        ap_return_7 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_7,
        ap_return_8 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_8,
        ap_return_9 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_9,
        ap_return_10 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_10,
        ap_return_11 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_11,
        ap_return_12 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_12,
        ap_return_13 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_13,
        ap_return_14 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_14,
        ap_return_15 => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_15,
        ap_ce => call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start_reg <= ap_const_logic_1;
                elsif ((call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ready = ap_const_logic_1)) then 
                    call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_321)) then
                if ((ap_const_boolean_1 = ap_condition_330)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_326)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135 <= select_ln213_reg_811;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135 <= ap_phi_reg_pp0_iter1_storemerge_i_i_reg_135;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_124 <= add_ln233_reg_649;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_124 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    pX_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_311)) then
                if ((icmp_ln203_fu_456_p2 = ap_const_lv1_1)) then 
                    pX_5 <= ap_const_lv32_0;
                elsif ((icmp_ln203_fu_456_p2 = ap_const_lv1_0)) then 
                    pX_5 <= add_ln216_fu_462_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_886)) then 
                    pY_5 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_235)) then 
                    pY_5 <= add_ln211_fu_506_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_891)) then 
                    sX_5 <= select_ln218_reg_802;
                elsif ((ap_const_boolean_1 = ap_condition_229)) then 
                    sX_5 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln233_reg_649 <= add_ln233_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln185_6_reg_754 <= and_ln185_6_fu_402_p2;
                pool_window_0_V_10_reg_694 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_3;
                pool_window_0_V_2_reg_699 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_2;
                pool_window_0_V_3_reg_709 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_0;
                pool_window_0_V_reg_704 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_1;
                pool_window_1_V_10_reg_714 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_8;
                pool_window_1_V_2_reg_724 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_10;
                pool_window_1_V_3_reg_729 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_11;
                pool_window_1_V_reg_719 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_9;
                pool_window_2_V_10_reg_674 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_7;
                pool_window_2_V_2_reg_679 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_6;
                pool_window_2_V_3_reg_689 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_4;
                pool_window_2_V_reg_684 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_5;
                pool_window_3_V_10_reg_734 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_12;
                pool_window_3_V_2_reg_744 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_14;
                pool_window_3_V_3_reg_749 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_15;
                pool_window_3_V_reg_739 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_13;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_phi_reg_pp0_iter1_storemerge_i_i_reg_135 <= ap_phi_reg_pp0_iter0_storemerge_i_i_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln185_6_fu_402_p2))) then
                icmp_ln1496_35_reg_763 <= icmp_ln1496_35_fu_414_p2;
                icmp_ln1496_37_reg_768 <= icmp_ln1496_37_fu_420_p2;
                icmp_ln1496_38_reg_773 <= icmp_ln1496_38_fu_426_p2;
                icmp_ln1496_40_reg_778 <= icmp_ln1496_40_fu_432_p2;
                icmp_ln1496_41_reg_783 <= icmp_ln1496_41_fu_438_p2;
                icmp_ln1496_43_reg_788 <= icmp_ln1496_43_fu_444_p2;
                icmp_ln1496_44_reg_793 <= icmp_ln1496_44_fu_450_p2;
                icmp_ln1496_reg_758 <= icmp_ln1496_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln203_reg_798 <= icmp_ln203_fu_456_p2;
                icmp_ln233_reg_645 <= icmp_ln233_fu_170_p2;
                icmp_ln233_reg_645_pp0_iter1_reg <= icmp_ln233_reg_645;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_456_p2 = ap_const_lv1_1))) then
                icmp_ln207_reg_807 <= icmp_ln207_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_data_V_7_12 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_12;
                kernel_data_V_7_13 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_13;
                kernel_data_V_7_14 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_14;
                kernel_data_V_7_15 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_15;
                kernel_data_V_7_4 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_8;
                kernel_data_V_7_5 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_9;
                kernel_data_V_7_6 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_10;
                kernel_data_V_7_7 <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_reg_798 = ap_const_lv1_1))) then
                sY_5 <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_fu_500_p2 = ap_const_lv1_0) and (icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_456_p2 = ap_const_lv1_1))) then
                select_ln213_reg_811 <= select_ln213_fu_524_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln203_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln218_reg_802 <= select_ln218_fu_480_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln185_6_reg_754))) then
                tmp_data_0_V_34_reg_816 <= tmp_data_0_V_34_fu_548_p3;
                tmp_data_1_V_32_reg_821 <= tmp_data_1_V_32_fu_572_p3;
                tmp_data_2_V_32_reg_826 <= tmp_data_2_V_32_fu_596_p3;
                tmp_data_3_V_32_reg_831 <= tmp_data_3_V_32_fu_620_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_data_0_V_reg_654 <= data_V_data_0_V_dout;
                tmp_data_1_V_reg_659 <= data_V_data_1_V_dout;
                tmp_data_2_V_reg_664 <= data_V_data_2_V_dout;
                tmp_data_3_V_reg_669 <= data_V_data_3_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln233_fu_170_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_fu_170_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln233_fu_170_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln211_fu_506_p2 <= std_logic_vector(unsigned(pY_5) + unsigned(ap_const_lv32_1));
    add_ln213_fu_518_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_sY_5_load) + unsigned(ap_const_lv32_1));
    add_ln216_fu_462_p2 <= std_logic_vector(unsigned(pX_5) + unsigned(ap_const_lv32_1));
    add_ln218_fu_474_p2 <= std_logic_vector(unsigned(sX_5) + unsigned(ap_const_lv32_1));
    add_ln233_fu_176_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_128_p4) + unsigned(ap_const_lv7_1));
    and_ln185_5_fu_396_p2 <= (icmp_ln185_9_fu_384_p2 and icmp_ln185_8_fu_374_p2);
    and_ln185_6_fu_402_p2 <= (and_ln185_fu_390_p2 and and_ln185_5_fu_396_p2);
    and_ln185_fu_390_p2 <= (icmp_ln185_fu_354_p2 and icmp_ln185_7_fu_364_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, io_acc_block_signal_op119)
    begin
                ap_block_pp0_stage0_01001 <= ((io_acc_block_signal_op119 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_6_reg_754));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, io_acc_block_signal_op119)
    begin
                ap_block_pp0_stage0_11001 <= ((io_acc_block_signal_op119 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_6_reg_754));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp34_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, io_acc_block_signal_op119)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp34 <= ((io_acc_block_signal_op119 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_6_reg_754));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, io_acc_block_signal_op119)
    begin
                ap_block_pp0_stage0_subdone <= ((io_acc_block_signal_op119 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln185_6_reg_754));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln233_reg_645, io_acc_block_signal_op21)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln233_reg_645 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln233_reg_645, io_acc_block_signal_op21)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln233_reg_645 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage1_iter0_assign_proc : process(icmp_ln233_reg_645, io_acc_block_signal_op21)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln233_reg_645 = ap_const_lv1_0) and (io_acc_block_signal_op21 = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter2_assign_proc : process(and_ln185_6_reg_754, io_acc_block_signal_op119)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((io_acc_block_signal_op119 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln185_6_reg_754));
    end process;


    ap_block_state6_pp0_stage0_iter2_ignore_call18_assign_proc : process(and_ln185_6_reg_754, io_acc_block_signal_op119)
    begin
                ap_block_state6_pp0_stage0_iter2_ignore_call18 <= ((io_acc_block_signal_op119 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln185_6_reg_754));
    end process;


    ap_condition_229_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln203_fu_456_p2)
    begin
                ap_condition_229 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_456_p2 = ap_const_lv1_1));
    end process;


    ap_condition_235_assign_proc : process(icmp_ln233_reg_645, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln203_fu_456_p2, icmp_ln207_fu_500_p2)
    begin
                ap_condition_235 <= ((icmp_ln207_fu_500_p2 = ap_const_lv1_0) and (icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln203_fu_456_p2 = ap_const_lv1_1));
    end process;


    ap_condition_311_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_311 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_321_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_321 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_326_assign_proc : process(icmp_ln233_reg_645_pp0_iter1_reg, icmp_ln203_reg_798, icmp_ln207_reg_807)
    begin
                ap_condition_326 <= ((icmp_ln207_reg_807 = ap_const_lv1_0) and (icmp_ln233_reg_645_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln203_reg_798 = ap_const_lv1_1));
    end process;


    ap_condition_330_assign_proc : process(icmp_ln233_reg_645_pp0_iter1_reg, icmp_ln203_reg_798, icmp_ln207_reg_807)
    begin
                ap_condition_330 <= ((icmp_ln233_reg_645_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln207_reg_807 = ap_const_lv1_1) and (icmp_ln203_reg_798 = ap_const_lv1_1));
    end process;


    ap_condition_886_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln233_reg_645_pp0_iter1_reg, ap_block_pp0_stage1_11001, icmp_ln203_reg_798, icmp_ln207_reg_807)
    begin
                ap_condition_886 <= ((icmp_ln233_reg_645_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln207_reg_807 = ap_const_lv1_1) and (icmp_ln203_reg_798 = ap_const_lv1_1));
    end process;


    ap_condition_891_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln203_reg_798)
    begin
                ap_condition_891 <= ((icmp_ln203_reg_798 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln233_fu_170_p2)
    begin
        if ((icmp_ln233_fu_170_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_128_p4_assign_proc : process(icmp_ln233_reg_645, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_124, add_ln233_reg_649, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_128_p4 <= add_ln233_reg_649;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_128_p4 <= indvar_flatten_reg_124;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_i_i_reg_135 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= internal_ap_ready;

    ap_sig_allocacmp_sY_5_load_assign_proc : process(sY_5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln203_reg_798, ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln203_reg_798 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sY_5_load <= ap_phi_reg_pp0_iter2_storemerge_i_i_reg_135;
        else 
            ap_sig_allocacmp_sY_5_load <= sY_5;
        end if; 
    end process;


    call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp34)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp34) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ce <= ap_const_logic_1;
        else 
            call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start <= call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_start_reg;

    data_V_data_0_V_blk_n_assign_proc : process(data_V_data_0_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_645)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_0_V_blk_n <= data_V_data_0_V_empty_n;
        else 
            data_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_645, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data_V_data_0_V_read <= ap_const_logic_1;
        else 
            data_V_data_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_1_V_blk_n_assign_proc : process(data_V_data_1_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_645)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_1_V_blk_n <= data_V_data_1_V_empty_n;
        else 
            data_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_1_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_645, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data_V_data_1_V_read <= ap_const_logic_1;
        else 
            data_V_data_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_2_V_blk_n_assign_proc : process(data_V_data_2_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_645)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_2_V_blk_n <= data_V_data_2_V_empty_n;
        else 
            data_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_2_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_645, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data_V_data_2_V_read <= ap_const_logic_1;
        else 
            data_V_data_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_3_V_blk_n_assign_proc : process(data_V_data_3_V_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, icmp_ln233_reg_645)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            data_V_data_3_V_blk_n <= data_V_data_3_V_empty_n;
        else 
            data_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_3_V_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln233_reg_645, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln233_reg_645 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data_V_data_3_V_read <= ap_const_logic_1;
        else 
            data_V_data_3_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1496_35_fu_414_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_4) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_12)) else "0";
    icmp_ln1496_36_fu_542_p2 <= "1" when (signed(select_ln86_fu_532_p3) < signed(select_ln86_35_fu_537_p3)) else "0";
    icmp_ln1496_37_fu_420_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_1) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_9)) else "0";
    icmp_ln1496_38_fu_426_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_5) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_13)) else "0";
    icmp_ln1496_39_fu_566_p2 <= "1" when (signed(select_ln86_37_fu_556_p3) < signed(select_ln86_38_fu_561_p3)) else "0";
    icmp_ln1496_40_fu_432_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_2) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_10)) else "0";
    icmp_ln1496_41_fu_438_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_6) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_14)) else "0";
    icmp_ln1496_42_fu_590_p2 <= "1" when (signed(select_ln86_40_fu_580_p3) < signed(select_ln86_41_fu_585_p3)) else "0";
    icmp_ln1496_43_fu_444_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_3) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_11)) else "0";
    icmp_ln1496_44_fu_450_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_7) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_15)) else "0";
    icmp_ln1496_45_fu_614_p2 <= "1" when (signed(select_ln86_43_fu_604_p3) < signed(select_ln86_44_fu_609_p3)) else "0";
    icmp_ln1496_fu_408_p2 <= "1" when (signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_0) < signed(call_ret_shift_line_buffer_array_ap_fixed_4u_config10_s_fu_146_ap_return_8)) else "0";
    icmp_ln185_7_fu_364_p2 <= "1" when (ap_sig_allocacmp_sY_5_load = ap_const_lv32_1) else "0";
    icmp_ln185_8_fu_374_p2 <= "1" when (signed(pY_5) > signed(ap_const_lv32_0)) else "0";
    icmp_ln185_9_fu_384_p2 <= "1" when (signed(pX_5) > signed(ap_const_lv32_0)) else "0";
    icmp_ln185_fu_354_p2 <= "1" when (sX_5 = ap_const_lv32_1) else "0";
    icmp_ln203_fu_456_p2 <= "1" when (pX_5 = ap_const_lv32_7) else "0";
    icmp_ln207_fu_500_p2 <= "1" when (pY_5 = ap_const_lv32_7) else "0";
    icmp_ln233_fu_170_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_128_p4 = ap_const_lv7_40) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op119 <= (res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    io_acc_block_signal_op21 <= (data_V_data_3_V_empty_n and data_V_data_2_V_empty_n and data_V_data_1_V_empty_n and data_V_data_0_V_empty_n);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln185_6_reg_754)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln185_6_reg_754) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= tmp_data_0_V_34_reg_816;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln185_6_reg_754))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln185_6_reg_754)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln185_6_reg_754) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= tmp_data_1_V_32_reg_821;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln185_6_reg_754))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln185_6_reg_754)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln185_6_reg_754) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= tmp_data_2_V_32_reg_826;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln185_6_reg_754))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, and_ln185_6_reg_754)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln185_6_reg_754) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= tmp_data_3_V_32_reg_831;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, and_ln185_6_reg_754, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln185_6_reg_754))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln213_fu_524_p3 <= 
        ap_const_lv32_0 when (icmp_ln185_7_fu_364_p2(0) = '1') else 
        add_ln213_fu_518_p2;
    select_ln218_fu_480_p3 <= 
        ap_const_lv32_0 when (icmp_ln185_fu_354_p2(0) = '1') else 
        add_ln218_fu_474_p2;
    select_ln86_35_fu_537_p3 <= 
        pool_window_3_V_10_reg_734 when (icmp_ln1496_35_reg_763(0) = '1') else 
        pool_window_2_V_3_reg_689;
    select_ln86_37_fu_556_p3 <= 
        pool_window_1_V_reg_719 when (icmp_ln1496_37_reg_768(0) = '1') else 
        pool_window_0_V_reg_704;
    select_ln86_38_fu_561_p3 <= 
        pool_window_3_V_reg_739 when (icmp_ln1496_38_reg_773(0) = '1') else 
        pool_window_2_V_reg_684;
    select_ln86_40_fu_580_p3 <= 
        pool_window_1_V_2_reg_724 when (icmp_ln1496_40_reg_778(0) = '1') else 
        pool_window_0_V_2_reg_699;
    select_ln86_41_fu_585_p3 <= 
        pool_window_3_V_2_reg_744 when (icmp_ln1496_41_reg_783(0) = '1') else 
        pool_window_2_V_2_reg_679;
    select_ln86_43_fu_604_p3 <= 
        pool_window_1_V_3_reg_729 when (icmp_ln1496_43_reg_788(0) = '1') else 
        pool_window_0_V_10_reg_694;
    select_ln86_44_fu_609_p3 <= 
        pool_window_3_V_3_reg_749 when (icmp_ln1496_44_reg_793(0) = '1') else 
        pool_window_2_V_10_reg_674;
    select_ln86_fu_532_p3 <= 
        pool_window_1_V_10_reg_714 when (icmp_ln1496_reg_758(0) = '1') else 
        pool_window_0_V_3_reg_709;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_data_0_V_34_fu_548_p3 <= 
        select_ln86_35_fu_537_p3 when (icmp_ln1496_36_fu_542_p2(0) = '1') else 
        select_ln86_fu_532_p3;
    tmp_data_1_V_32_fu_572_p3 <= 
        select_ln86_38_fu_561_p3 when (icmp_ln1496_39_fu_566_p2(0) = '1') else 
        select_ln86_37_fu_556_p3;
    tmp_data_2_V_32_fu_596_p3 <= 
        select_ln86_41_fu_585_p3 when (icmp_ln1496_42_fu_590_p2(0) = '1') else 
        select_ln86_40_fu_580_p3;
    tmp_data_3_V_32_fu_620_p3 <= 
        select_ln86_44_fu_609_p3 when (icmp_ln1496_45_fu_614_p2(0) = '1') else 
        select_ln86_43_fu_604_p3;
end behav;
