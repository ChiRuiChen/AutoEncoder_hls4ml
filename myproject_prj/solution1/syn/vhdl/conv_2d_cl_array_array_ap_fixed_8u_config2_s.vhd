-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_array_array_ap_fixed_8u_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    data_V_data_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_data_V_empty_n : IN STD_LOGIC;
    data_V_data_V_read : OUT STD_LOGIC;
    res_V_data_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_0_V_full_n : IN STD_LOGIC;
    res_V_data_0_V_write : OUT STD_LOGIC;
    res_V_data_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_1_V_full_n : IN STD_LOGIC;
    res_V_data_1_V_write : OUT STD_LOGIC;
    res_V_data_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_2_V_full_n : IN STD_LOGIC;
    res_V_data_2_V_write : OUT STD_LOGIC;
    res_V_data_3_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_3_V_full_n : IN STD_LOGIC;
    res_V_data_3_V_write : OUT STD_LOGIC;
    res_V_data_4_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_4_V_full_n : IN STD_LOGIC;
    res_V_data_4_V_write : OUT STD_LOGIC;
    res_V_data_5_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_5_V_full_n : IN STD_LOGIC;
    res_V_data_5_V_write : OUT STD_LOGIC;
    res_V_data_6_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_6_V_full_n : IN STD_LOGIC;
    res_V_data_6_V_write : OUT STD_LOGIC;
    res_V_data_7_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_V_data_7_V_full_n : IN STD_LOGIC;
    res_V_data_7_V_write : OUT STD_LOGIC );
end;


architecture behav of conv_2d_cl_array_array_ap_fixed_8u_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4A59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100101001011001";
    constant ap_const_lv32_114B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000101001011";
    constant ap_const_lv32_FFFFCE83 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100111010000011";
    constant ap_const_lv32_4A96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100101010010110";
    constant ap_const_lv32_3292 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011001010010010";
    constant ap_const_lv32_FFFFE28A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110001010001010";
    constant ap_const_lv32_33A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111010";
    constant ap_const_lv32_55EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101010111101110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv11_483 : STD_LOGIC_VECTOR (10 downto 0) := "10010000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal kernel_data_V_8473 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_1466 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_2467 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_3468 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_4469 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_5470 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_6471 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal kernel_data_V_7472 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal w2_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (237 downto 0);
    signal pX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sX_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal res_V_data_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal and_ln272_2_reg_1147 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_data_1_V_blk_n : STD_LOGIC;
    signal res_V_data_2_V_blk_n : STD_LOGIC;
    signal res_V_data_3_V_blk_n : STD_LOGIC;
    signal res_V_data_4_V_blk_n : STD_LOGIC;
    signal res_V_data_5_V_blk_n : STD_LOGIC;
    signal res_V_data_6_V_blk_n : STD_LOGIC;
    signal res_V_data_7_V_blk_n : STD_LOGIC;
    signal w_index22_reg_243 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_data_0_V_7420_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_1_V_6718_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_2_V_6716_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_3_V_6714_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_4_V_2912_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_5_V_2910_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_6_V_298_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_7_V_296_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_0_V_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal sX_3_load_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln272_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_3_load_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln272_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_1_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_3_load_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_3_load_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln272_2_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln78_fu_566_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln78_reg_1151 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln19_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln19_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_1_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_reg_1167 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_3_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_3_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_4_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_4_reg_1178 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_5_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_5_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_6_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_6_reg_1189 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_7_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_7_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_625_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_index_reg_1205 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln64_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1210_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_7_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_7_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln76_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln76_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1255 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1116_cast_fu_817_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_s_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_1_reg_1326 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_2_reg_1331 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_3_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_4_reg_1341 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_5_reg_1346 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln708_6_reg_1351 : STD_LOGIC_VECTOR (29 downto 0);
    signal acc_0_V_fu_975_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_0_V_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal acc_1_V_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_1_V_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_V_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_2_V_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_V_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_3_V_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_V_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_4_V_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_V_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_5_V_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_6_V_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_6_V_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_7_V_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_7_V_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln293_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal io_acc_block_signal_op200 : STD_LOGIC;
    signal ap_block_state12 : BOOLEAN;
    signal select_ln308_fu_1040_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln308_reg_1408 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln297_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_1413 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln303_fu_1080_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln303_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_start : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_done : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_idle : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_ready : STD_LOGIC;
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_8 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten23_reg_231 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln78_fu_1104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_w_index22_phi_fu_247_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_storemerge_i_i_phi_fu_346_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_i_i_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln306_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln301_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_512_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_532_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln272_2_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_3_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_1_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln272_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_649_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_1_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln19_1_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_2_fu_671_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_3_fu_682_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln19_3_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_4_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_4_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_5_fu_707_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln19_5_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_6_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_6_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_823_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_835_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_844_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_853_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_862_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_871_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_880_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_823_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_844_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_853_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_862_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_871_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_880_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_889_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln708_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln308_fu_1035_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln303_fu_1075_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_336 : BOOLEAN;
    signal ap_condition_345 : BOOLEAN;

    component shift_line_buffer_array_ap_fixed_1u_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_elem_data_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_4_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_5_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_7_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_window_8_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_axi_mul_32s_32s_48_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component myproject_axi_mul_14s_32s_46_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (237 downto 0) );
    end component;



begin
    w2_V_U : component conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V
    generic map (
        DataWidth => 238,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353 : component shift_line_buffer_array_ap_fixed_1u_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_start,
        ap_done => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_done,
        ap_idle => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_idle,
        ap_ready => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_ready,
        in_elem_data_V_read => tmp_data_0_V_reg_1110,
        kernel_window_1_V_read => kernel_data_V_1466,
        kernel_window_2_V_read => kernel_data_V_2467,
        kernel_window_4_V_read => kernel_data_V_4469,
        kernel_window_5_V_read => kernel_data_V_5470,
        kernel_window_7_V_read => kernel_data_V_7472,
        kernel_window_8_V_read => kernel_data_V_8473,
        ap_return_0 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_0,
        ap_return_1 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_1,
        ap_return_2 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_2,
        ap_return_3 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_3,
        ap_return_4 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_4,
        ap_return_5 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_5,
        ap_return_6 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_6,
        ap_return_7 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_7,
        ap_return_8 => call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_8);

    myproject_axi_mul_32s_32s_48_5_1_U22 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_823_p0,
        din1 => trunc_ln76_reg_1220,
        ce => ap_const_logic_1,
        dout => grp_fu_823_p2);

    myproject_axi_mul_32s_32s_48_5_1_U23 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_835_p0,
        din1 => tmp_2_reg_1225,
        ce => ap_const_logic_1,
        dout => grp_fu_835_p2);

    myproject_axi_mul_32s_32s_48_5_1_U24 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_844_p0,
        din1 => tmp_3_reg_1230,
        ce => ap_const_logic_1,
        dout => grp_fu_844_p2);

    myproject_axi_mul_32s_32s_48_5_1_U25 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_853_p0,
        din1 => tmp_4_reg_1235,
        ce => ap_const_logic_1,
        dout => grp_fu_853_p2);

    myproject_axi_mul_32s_32s_48_5_1_U26 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_862_p0,
        din1 => tmp_5_reg_1240,
        ce => ap_const_logic_1,
        dout => grp_fu_862_p2);

    myproject_axi_mul_32s_32s_48_5_1_U27 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_871_p0,
        din1 => tmp_6_reg_1245,
        ce => ap_const_logic_1,
        dout => grp_fu_871_p2);

    myproject_axi_mul_32s_32s_48_5_1_U28 : component myproject_axi_mul_32s_32s_48_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_880_p0,
        din1 => tmp_7_reg_1250,
        ce => ap_const_logic_1,
        dout => grp_fu_880_p2);

    myproject_axi_mul_14s_32s_46_5_1_U29 : component myproject_axi_mul_14s_32s_46_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 14,
        din1_WIDTH => 32,
        dout_WIDTH => 46)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_1255,
        din1 => select_ln19_7_reg_1214,
        ce => ap_const_logic_1,
        dout => grp_fu_889_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln78_fu_1104_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_631_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten23_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_1104_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvar_flatten23_reg_231 <= add_ln78_reg_1151;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_231 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    pX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_336)) then
                if ((icmp_ln293_fu_1019_p2 = ap_const_lv1_1)) then 
                    pX_3 <= ap_const_lv32_0;
                elsif ((icmp_ln293_fu_1019_p2 = ap_const_lv1_0)) then 
                    pX_3 <= add_ln306_fu_1024_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_345)) then
                if ((icmp_ln297_fu_1059_p2 = ap_const_lv1_1)) then 
                    pY_3 <= ap_const_lv32_0;
                elsif ((icmp_ln297_fu_1059_p2 = ap_const_lv1_0)) then 
                    pY_3 <= add_ln301_fu_1064_p2;
                end if;
            end if; 
        end if;
    end process;

    sX_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                sX_3 <= select_ln308_reg_1408;
            elsif ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln293_fu_1019_p2 = ap_const_lv1_1))) then 
                sX_3 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    storemerge_i_i_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln297_fu_1059_p2 = ap_const_lv1_1) and (icmp_ln293_fu_1019_p2 = ap_const_lv1_1))) then 
                storemerge_i_i_reg_342 <= ap_const_lv32_0;
            elsif (((icmp_ln297_reg_1413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln293_reg_1404 = ap_const_lv1_1))) then 
                storemerge_i_i_reg_342 <= select_ln303_reg_1417;
            end if; 
        end if;
    end process;

    tmp_data_0_V_7420_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_0_V_7420_reg_254 <= acc_0_V_fu_975_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_0_V_7420_reg_254 <= ap_const_lv32_4A59;
            end if; 
        end if;
    end process;

    tmp_data_1_V_6718_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_1_V_6718_reg_265 <= acc_1_V_fu_980_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_1_V_6718_reg_265 <= ap_const_lv32_114B;
            end if; 
        end if;
    end process;

    tmp_data_2_V_6716_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_2_V_6716_reg_276 <= acc_2_V_fu_985_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_2_V_6716_reg_276 <= ap_const_lv32_FFFFCE83;
            end if; 
        end if;
    end process;

    tmp_data_3_V_6714_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_3_V_6714_reg_287 <= acc_3_V_fu_990_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_3_V_6714_reg_287 <= ap_const_lv32_4A96;
            end if; 
        end if;
    end process;

    tmp_data_4_V_2912_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_4_V_2912_reg_298 <= acc_4_V_fu_995_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_4_V_2912_reg_298 <= ap_const_lv32_3292;
            end if; 
        end if;
    end process;

    tmp_data_5_V_2910_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_5_V_2910_reg_309 <= acc_5_V_fu_1000_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_5_V_2910_reg_309 <= ap_const_lv32_FFFFE28A;
            end if; 
        end if;
    end process;

    tmp_data_6_V_298_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_6_V_298_reg_320 <= acc_6_V_fu_1005_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_6_V_298_reg_320 <= ap_const_lv32_33A;
            end if; 
        end if;
    end process;

    tmp_data_7_V_296_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_7_V_296_reg_331 <= acc_7_V_fu_1013_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                tmp_data_7_V_296_reg_331 <= ap_const_lv32_55EE;
            end if; 
        end if;
    end process;

    w_index22_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_1210 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_index22_reg_243 <= w_index_reg_1205;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then 
                w_index22_reg_243 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                acc_0_V_reg_1356 <= acc_0_V_fu_975_p2;
                acc_1_V_reg_1362 <= acc_1_V_fu_980_p2;
                acc_2_V_reg_1368 <= acc_2_V_fu_985_p2;
                acc_3_V_reg_1374 <= acc_3_V_fu_990_p2;
                acc_4_V_reg_1380 <= acc_4_V_fu_995_p2;
                acc_5_V_reg_1386 <= acc_5_V_fu_1000_p2;
                acc_6_V_reg_1392 <= acc_6_V_fu_1005_p2;
                acc_7_V_reg_1398 <= acc_7_V_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln78_reg_1151 <= add_ln78_fu_566_p2;
                and_ln272_2_reg_1147 <= and_ln272_2_fu_560_p2;
                icmp_ln272_1_reg_1130 <= icmp_ln272_1_fu_502_p2;
                icmp_ln272_reg_1120 <= icmp_ln272_fu_492_p2;
                kernel_data_V_0 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_0;
                kernel_data_V_1466 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_3;
                kernel_data_V_2467 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_4;
                kernel_data_V_3468 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_1;
                kernel_data_V_4469 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_5;
                kernel_data_V_5470 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_6;
                kernel_data_V_6471 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_2;
                kernel_data_V_7472 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_7;
                kernel_data_V_8473 <= call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_return_8;
                pX_3_load_reg_1141 <= pX_3;
                pY_3_load_reg_1135 <= pY_3;
                sX_3_load_reg_1115 <= sX_3;
                sY_3_load_reg_1125 <= sY_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln19_1_reg_1161 <= icmp_ln19_1_fu_578_p2;
                icmp_ln19_2_reg_1167 <= icmp_ln19_2_fu_584_p2;
                icmp_ln19_3_reg_1172 <= icmp_ln19_3_fu_590_p2;
                icmp_ln19_4_reg_1178 <= icmp_ln19_4_fu_596_p2;
                icmp_ln19_5_reg_1183 <= icmp_ln19_5_fu_602_p2;
                icmp_ln19_6_reg_1189 <= icmp_ln19_6_fu_608_p2;
                icmp_ln19_7_reg_1194 <= icmp_ln19_7_fu_614_p2;
                icmp_ln19_reg_1156 <= icmp_ln19_fu_572_p2;
                icmp_ln64_reg_1210 <= icmp_ln64_fu_631_p2;
                icmp_ln64_reg_1210_pp0_iter1_reg <= icmp_ln64_reg_1210;
                select_ln19_7_reg_1214 <= select_ln19_7_fu_735_p3;
                tmp_2_reg_1225 <= w2_V_q0(63 downto 32);
                tmp_3_reg_1230 <= w2_V_q0(95 downto 64);
                tmp_4_reg_1235 <= w2_V_q0(127 downto 96);
                tmp_5_reg_1240 <= w2_V_q0(159 downto 128);
                tmp_6_reg_1245 <= w2_V_q0(191 downto 160);
                tmp_7_reg_1250 <= w2_V_q0(223 downto 192);
                tmp_8_reg_1255 <= w2_V_q0(237 downto 224);
                trunc_ln76_reg_1220 <= trunc_ln76_fu_743_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                icmp_ln293_reg_1404 <= icmp_ln293_fu_1019_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln293_fu_1019_p2 = ap_const_lv1_1))) then
                icmp_ln297_reg_1413 <= icmp_ln297_fu_1059_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln64_reg_1210_pp0_iter2_reg <= icmp_ln64_reg_1210_pp0_iter1_reg;
                icmp_ln64_reg_1210_pp0_iter3_reg <= icmp_ln64_reg_1210_pp0_iter2_reg;
                icmp_ln64_reg_1210_pp0_iter4_reg <= icmp_ln64_reg_1210_pp0_iter3_reg;
                icmp_ln64_reg_1210_pp0_iter5_reg <= icmp_ln64_reg_1210_pp0_iter4_reg;
                icmp_ln64_reg_1210_pp0_iter6_reg <= icmp_ln64_reg_1210_pp0_iter5_reg;
                trunc_ln708_1_reg_1326 <= grp_fu_844_p2(47 downto 16);
                trunc_ln708_2_reg_1331 <= grp_fu_853_p2(47 downto 16);
                trunc_ln708_3_reg_1336 <= grp_fu_862_p2(47 downto 16);
                trunc_ln708_4_reg_1341 <= grp_fu_871_p2(47 downto 16);
                trunc_ln708_5_reg_1346 <= grp_fu_880_p2(47 downto 16);
                trunc_ln708_6_reg_1351 <= grp_fu_889_p2(45 downto 16);
                trunc_ln708_s_reg_1321 <= grp_fu_835_p2(47 downto 16);
                trunc_ln_reg_1316 <= grp_fu_823_p2(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln293_reg_1404 = ap_const_lv1_1))) then
                sY_3 <= ap_phi_mux_storemerge_i_i_phi_fu_346_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (icmp_ln297_fu_1059_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln293_fu_1019_p2 = ap_const_lv1_1))) then
                select_ln303_reg_1417 <= select_ln303_fu_1080_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (icmp_ln293_fu_1019_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                select_ln308_reg_1408 <= select_ln308_fu_1040_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_0_V_reg_1110 <= data_V_data_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                w_index_reg_1205 <= w_index_fu_625_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_data_V_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state12, and_ln272_2_reg_1147, ap_CS_fsm_state3, and_ln272_2_fu_560_p2, ap_enable_reg_pp0_iter7, io_acc_block_signal_op200, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6, ap_CS_fsm_state13, icmp_ln78_fu_1104_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((data_V_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = and_ln272_2_fu_560_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln78_fu_1104_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    acc_0_V_fu_975_p2 <= std_logic_vector(unsigned(tmp_data_0_V_7420_reg_254) + unsigned(trunc_ln_reg_1316));
    acc_1_V_fu_980_p2 <= std_logic_vector(unsigned(tmp_data_1_V_6718_reg_265) + unsigned(trunc_ln708_s_reg_1321));
    acc_2_V_fu_985_p2 <= std_logic_vector(unsigned(tmp_data_2_V_6716_reg_276) + unsigned(trunc_ln708_1_reg_1326));
    acc_3_V_fu_990_p2 <= std_logic_vector(unsigned(tmp_data_3_V_6714_reg_287) + unsigned(trunc_ln708_2_reg_1331));
    acc_4_V_fu_995_p2 <= std_logic_vector(unsigned(tmp_data_4_V_2912_reg_298) + unsigned(trunc_ln708_3_reg_1336));
    acc_5_V_fu_1000_p2 <= std_logic_vector(unsigned(tmp_data_5_V_2910_reg_309) + unsigned(trunc_ln708_4_reg_1341));
    acc_6_V_fu_1005_p2 <= std_logic_vector(unsigned(tmp_data_6_V_298_reg_320) + unsigned(trunc_ln708_5_reg_1346));
    acc_7_V_fu_1013_p2 <= std_logic_vector(unsigned(tmp_data_7_V_296_reg_331) + unsigned(sext_ln708_fu_1010_p1));
    add_ln301_fu_1064_p2 <= std_logic_vector(unsigned(pY_3_load_reg_1135) + unsigned(ap_const_lv32_1));
    add_ln303_fu_1075_p2 <= std_logic_vector(unsigned(sY_3_load_reg_1125) + unsigned(ap_const_lv32_1));
    add_ln306_fu_1024_p2 <= std_logic_vector(unsigned(pX_3_load_reg_1141) + unsigned(ap_const_lv32_1));
    add_ln308_fu_1035_p2 <= std_logic_vector(unsigned(sX_3_load_reg_1115) + unsigned(ap_const_lv32_1));
    add_ln78_fu_566_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_231) + unsigned(ap_const_lv11_1));
    and_ln272_1_fu_554_p2 <= (icmp_ln272_3_fu_542_p2 and icmp_ln272_2_fu_522_p2);
    and_ln272_2_fu_560_p2 <= (and_ln272_fu_548_p2 and and_ln272_1_fu_554_p2);
    and_ln272_fu_548_p2 <= (icmp_ln272_fu_492_p2 and icmp_ln272_1_fu_502_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(4);
    ap_CS_fsm_state13 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_assign_proc : process(and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
                ap_block_state12 <= ((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_336_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
                ap_condition_336 <= (not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12));
    end process;


    ap_condition_345_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, icmp_ln293_fu_1019_p2, io_acc_block_signal_op200)
    begin
                ap_condition_345 <= (not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln293_fu_1019_p2 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13, icmp_ln78_fu_1104_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln78_fu_1104_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_346_p4_assign_proc : process(icmp_ln293_reg_1404, icmp_ln297_reg_1413, select_ln303_reg_1417, ap_CS_fsm_state13, storemerge_i_i_reg_342)
    begin
        if (((icmp_ln297_reg_1413 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln293_reg_1404 = ap_const_lv1_1))) then 
            ap_phi_mux_storemerge_i_i_phi_fu_346_p4 <= select_ln303_reg_1417;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_346_p4 <= storemerge_i_i_reg_342;
        end if; 
    end process;


    ap_phi_mux_w_index22_phi_fu_247_p4_assign_proc : process(w_index22_reg_243, ap_CS_fsm_pp0_stage0, w_index_reg_1205, icmp_ln64_reg_1210, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln64_reg_1210 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_w_index22_phi_fu_247_p4 <= w_index_reg_1205;
        else 
            ap_phi_mux_w_index22_phi_fu_247_p4 <= w_index22_reg_243;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_start <= ap_const_logic_1;
        else 
            call_ret_shift_line_buffer_array_ap_fixed_1u_config2_s_fu_353_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    data_V_data_V_blk_n_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_data_V_blk_n <= data_V_data_V_empty_n;
        else 
            data_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_data_V_read_assign_proc : process(data_V_data_V_empty_n, ap_CS_fsm_state2)
    begin
        if (((data_V_data_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_V_data_V_read <= ap_const_logic_1;
        else 
            data_V_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_823_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    grp_fu_835_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    grp_fu_844_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    grp_fu_853_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    grp_fu_862_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    grp_fu_871_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    grp_fu_880_p0 <= sext_ln1116_cast_fu_817_p1(32 - 1 downto 0);
    icmp_ln19_1_fu_578_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_1) else "0";
    icmp_ln19_2_fu_584_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_2) else "0";
    icmp_ln19_3_fu_590_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_3) else "0";
    icmp_ln19_4_fu_596_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_4) else "0";
    icmp_ln19_5_fu_602_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_5) else "0";
    icmp_ln19_6_fu_608_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_6) else "0";
    icmp_ln19_7_fu_614_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_7) else "0";
    icmp_ln19_fu_572_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_0) else "0";
    icmp_ln272_1_fu_502_p2 <= "1" when (sY_3 = ap_const_lv32_2) else "0";
    icmp_ln272_2_fu_522_p2 <= "1" when (signed(tmp_fu_512_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln272_3_fu_542_p2 <= "1" when (signed(tmp_1_fu_532_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln272_fu_492_p2 <= "1" when (sX_3 = ap_const_lv32_2) else "0";
    icmp_ln293_fu_1019_p2 <= "1" when (pX_3_load_reg_1141 = ap_const_lv32_21) else "0";
    icmp_ln297_fu_1059_p2 <= "1" when (pY_3_load_reg_1135 = ap_const_lv32_21) else "0";
    icmp_ln64_fu_631_p2 <= "1" when (ap_phi_mux_w_index22_phi_fu_247_p4 = ap_const_lv4_8) else "0";
    icmp_ln78_fu_1104_p2 <= "1" when (indvar_flatten23_reg_231 = ap_const_lv11_483) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state13, icmp_ln78_fu_1104_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln78_fu_1104_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op200 <= (res_V_data_7_V_full_n and res_V_data_6_V_full_n and res_V_data_5_V_full_n and res_V_data_4_V_full_n and res_V_data_3_V_full_n and res_V_data_2_V_full_n and res_V_data_1_V_full_n and res_V_data_0_V_full_n);
    or_ln19_1_fu_667_p2 <= (icmp_ln19_5_reg_1183 or icmp_ln19_4_reg_1178);
    or_ln19_2_fu_678_p2 <= (icmp_ln19_3_reg_1172 or icmp_ln19_2_reg_1167);
    or_ln19_3_fu_689_p2 <= (icmp_ln19_reg_1156 or icmp_ln19_1_reg_1161);
    or_ln19_4_fu_701_p2 <= (or_ln19_fu_656_p2 or or_ln19_1_fu_667_p2);
    or_ln19_5_fu_715_p2 <= (or_ln19_3_fu_689_p2 or or_ln19_2_fu_678_p2);
    or_ln19_6_fu_729_p2 <= (or_ln19_5_fu_715_p2 or or_ln19_4_fu_701_p2);
    or_ln19_fu_656_p2 <= (icmp_ln19_7_reg_1194 or icmp_ln19_6_reg_1189);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    res_V_data_0_V_blk_n_assign_proc : process(res_V_data_0_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_0_V_blk_n <= res_V_data_0_V_full_n;
        else 
            res_V_data_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_0_V_din <= acc_0_V_reg_1356;

    res_V_data_0_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_0_V_write <= ap_const_logic_1;
        else 
            res_V_data_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_1_V_blk_n_assign_proc : process(res_V_data_1_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_1_V_blk_n <= res_V_data_1_V_full_n;
        else 
            res_V_data_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_1_V_din <= acc_1_V_reg_1362;

    res_V_data_1_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_1_V_write <= ap_const_logic_1;
        else 
            res_V_data_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_2_V_blk_n_assign_proc : process(res_V_data_2_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_2_V_blk_n <= res_V_data_2_V_full_n;
        else 
            res_V_data_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_2_V_din <= acc_2_V_reg_1368;

    res_V_data_2_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_2_V_write <= ap_const_logic_1;
        else 
            res_V_data_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_3_V_blk_n_assign_proc : process(res_V_data_3_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_3_V_blk_n <= res_V_data_3_V_full_n;
        else 
            res_V_data_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_3_V_din <= acc_3_V_reg_1374;

    res_V_data_3_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_3_V_write <= ap_const_logic_1;
        else 
            res_V_data_3_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_4_V_blk_n_assign_proc : process(res_V_data_4_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_4_V_blk_n <= res_V_data_4_V_full_n;
        else 
            res_V_data_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_4_V_din <= acc_4_V_reg_1380;

    res_V_data_4_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_4_V_write <= ap_const_logic_1;
        else 
            res_V_data_4_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_5_V_blk_n_assign_proc : process(res_V_data_5_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_5_V_blk_n <= res_V_data_5_V_full_n;
        else 
            res_V_data_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_5_V_din <= acc_5_V_reg_1386;

    res_V_data_5_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_5_V_write <= ap_const_logic_1;
        else 
            res_V_data_5_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_6_V_blk_n_assign_proc : process(res_V_data_6_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_6_V_blk_n <= res_V_data_6_V_full_n;
        else 
            res_V_data_6_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_6_V_din <= acc_6_V_reg_1392;

    res_V_data_6_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_6_V_write <= ap_const_logic_1;
        else 
            res_V_data_6_V_write <= ap_const_logic_0;
        end if; 
    end process;


    res_V_data_7_V_blk_n_assign_proc : process(res_V_data_7_V_full_n, ap_CS_fsm_state12, and_ln272_2_reg_1147)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_7_V_blk_n <= res_V_data_7_V_full_n;
        else 
            res_V_data_7_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_V_data_7_V_din <= acc_7_V_reg_1398;

    res_V_data_7_V_write_assign_proc : process(ap_CS_fsm_state12, and_ln272_2_reg_1147, io_acc_block_signal_op200)
    begin
        if ((not(((io_acc_block_signal_op200 = ap_const_logic_0) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln272_2_reg_1147))) then 
            res_V_data_7_V_write <= ap_const_logic_1;
        else 
            res_V_data_7_V_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_1_fu_660_p3 <= 
        kernel_data_V_5470 when (icmp_ln19_5_reg_1183(0) = '1') else 
        kernel_data_V_4469;
    select_ln19_2_fu_671_p3 <= 
        kernel_data_V_3468 when (icmp_ln19_3_reg_1172(0) = '1') else 
        kernel_data_V_2467;
    select_ln19_3_fu_682_p3 <= 
        kernel_data_V_1466 when (icmp_ln19_1_reg_1161(0) = '1') else 
        kernel_data_V_0;
    select_ln19_4_fu_693_p3 <= 
        select_ln19_fu_649_p3 when (or_ln19_fu_656_p2(0) = '1') else 
        select_ln19_1_fu_660_p3;
    select_ln19_5_fu_707_p3 <= 
        select_ln19_2_fu_671_p3 when (or_ln19_2_fu_678_p2(0) = '1') else 
        select_ln19_3_fu_682_p3;
    select_ln19_6_fu_721_p3 <= 
        select_ln19_4_fu_693_p3 when (or_ln19_4_fu_701_p2(0) = '1') else 
        select_ln19_5_fu_707_p3;
    select_ln19_7_fu_735_p3 <= 
        select_ln19_6_fu_721_p3 when (or_ln19_6_fu_729_p2(0) = '1') else 
        kernel_data_V_8473;
    select_ln19_fu_649_p3 <= 
        kernel_data_V_7472 when (icmp_ln19_7_reg_1194(0) = '1') else 
        kernel_data_V_6471;
    select_ln303_fu_1080_p3 <= 
        ap_const_lv32_2 when (icmp_ln272_1_reg_1130(0) = '1') else 
        add_ln303_fu_1075_p2;
    select_ln308_fu_1040_p3 <= 
        ap_const_lv32_2 when (icmp_ln272_reg_1120(0) = '1') else 
        add_ln308_fu_1035_p2;
        sext_ln1116_cast_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln19_7_reg_1214),48));

        sext_ln708_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_6_reg_1351),32));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_532_p4 <= pX_3(31 downto 1);
    tmp_fu_512_p4 <= pY_3(31 downto 1);
    trunc_ln76_fu_743_p1 <= w2_V_q0(32 - 1 downto 0);
    w2_V_address0 <= zext_ln76_fu_620_p1(4 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_625_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_w_index22_phi_fu_247_p4));
    zext_ln76_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index22_phi_fu_247_p4),64));
end behav;
