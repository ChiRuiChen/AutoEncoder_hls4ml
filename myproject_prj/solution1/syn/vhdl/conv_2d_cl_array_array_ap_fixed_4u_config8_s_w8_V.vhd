-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_rom is 
    generic(
             DWIDTH     : integer := 113; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 36
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00001011111011010111111111111111111100110001001111111111111111111111101001111101111111111111111111011000011101101", 
    1 => "11110010001011101111111111111111111101111110010100000000000000000001101001101000000000000000000000001000010101011", 
    2 => "11110110001101111000000000000000000100111011010011111111111111111111110010111001100000000000000000000101101001100", 
    3 => "00001011110000011000000000000000001101001000110011111111111111111111000100101100100000000000000001010101110100000", 
    4 => "11110110010011011000000000000000010000001011111101111111111111111110100010001111111111111111111111100101010010011", 
    5 => "11101110011111110111111111111111110100000001001110000000000000000010100000011101000000000000000000001000000111001", 
    6 => "00001110110101111000000000000000000110110110100001111111111111111111011011101101011111111111111111111000011111100", 
    7 => "00000001001111101000000000000000000000110110100101111111111111111101000000010011100000000000000000011011110111010", 
    8 => "00010010101000100000000000000000000101101010011100000000000000000000000111100000011111111111111111100010011000010", 
    9 => "11110001011111011111111111111111111110000110001010000000000000000011000001110110100000000000000000000110110011011", 
    10 => "00000010100001010111111111111111111101111100101001111111111111111111110010001111000000000000000000110001101001100", 
    11 => "00001001011101011000000000000000000101111001001101111111111111111010100101000111011111111111111111110010101011000", 
    12 => "00000011111010000000000000000000000001010100000110000000000000000000010011111110111111111111111111111011100100100", 
    13 => "00010110100110111000000000000000000100000000000001111111111111111100111111010001011111111111111111101111000101100", 
    14 => "00010000010011000000000000000000001000110111101000000000000000000000111011100011100000000000000000001010001101010", 
    15 => "11101001011010011111111111111111111110110100100000000000000000000000100011110100000000000000000000000111101011100", 
    16 => "00100101011011010000000000000000000011111101011010000000000000000000111101000111100000000000000000011010001000000", 
    17 => "00000001000101010000000000000000000001000111110101111111111111111101110000001010000000000000000000001101000101110", 
    18 => "00110001001000100000000000000000000101001011110110000000000000000010001100000100011111111111111111100011110011011", 
    19 => "10101100101001100111111111111111111000110011011000000000000000000001001111010101011111111111111111100010111010000", 
    20 => "00110011010100001111111111111111110111000101101010000000000000000101010100011110111111111111111111100111011111110", 
    21 => "00010001111101110000000000000000001001001001111101111111111111111100000100010111000000000000000000000100100001100", 
    22 => "00000101111111000000000000000000000011011000000010000000000000000011011010001110111111111111111111110000001010101", 
    23 => "11000111111101010000000000000000000000110011010001111111111111111110111111100111000000000000000000010110010111000", 
    24 => "11111110110001010000000000000000000010110111010100000000000000000000010101111100011111111111111111011111011011001", 
    25 => "11011111100010001111111111111111110011111110001000000000000000000001001101111001111111111111111111110001010000011", 
    26 => "11111101101000111000000000000000000010010010110011111111111111111110110100110111011111111111111111110011010000101", 
    27 => "00000111011001100000000000000000000001010110101111111111111111111111011111001111011111111111111111111100011101011", 
    28 => "11111101101111011000000000000000000010010011111101111111111111111111000110101111111111111111111111111110010011111", 
    29 => "11100101010011101111111111111111101111111101000110000000000000000001001001000011000000000000000000001001111111111", 
    30 => "00011101011111110000000000000000000010100110011101111111111111111110110101001100011111111111111111011001101100011", 
    31 => "00011110011101111111111111111111111001001100001001111111111111111110111001000101000000000000000000000110100100110", 
    32 => "11110100000101101000000000000000000110100110000000000000000000000000010111010100111111111111111111010101011011000", 
    33 => "11101111111011011111111111111111110100001111001110000000000000000001001010000100111111111111111111111100011111101", 
    34 => "00001100011111010000000000000000000001111011000101111111111111111111100111011011000000000000000000111111010001100", 
    35 => "00010001000001100111111111111111110110010011000001111111111111111101010010100111111111111111111110011101101111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V is
    generic (
        DataWidth : INTEGER := 113;
        AddressRange : INTEGER := 36;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V is
    component conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_rom_U :  component conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


