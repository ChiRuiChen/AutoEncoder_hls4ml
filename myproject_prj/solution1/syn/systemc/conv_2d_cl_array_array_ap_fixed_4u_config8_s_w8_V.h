// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_H__
#define __conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 113;
  static const unsigned AddressRange = 36;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_ram) {
        ram[0] = "0b00001011111011010111111111111111111100110001001111111111111111111111101001111101111111111111111111011000011101101";
        ram[1] = "0b11110010001011101111111111111111111101111110010100000000000000000001101001101000000000000000000000001000010101011";
        ram[2] = "0b11110110001101111000000000000000000100111011010011111111111111111111110010111001100000000000000000000101101001100";
        ram[3] = "0b00001011110000011000000000000000001101001000110011111111111111111111000100101100100000000000000001010101110100000";
        ram[4] = "0b11110110010011011000000000000000010000001011111101111111111111111110100010001111111111111111111111100101010010011";
        ram[5] = "0b11101110011111110111111111111111110100000001001110000000000000000010100000011101000000000000000000001000000111001";
        ram[6] = "0b00001110110101111000000000000000000110110110100001111111111111111111011011101101011111111111111111111000011111100";
        ram[7] = "0b00000001001111101000000000000000000000110110100101111111111111111101000000010011100000000000000000011011110111010";
        ram[8] = "0b00010010101000100000000000000000000101101010011100000000000000000000000111100000011111111111111111100010011000010";
        ram[9] = "0b11110001011111011111111111111111111110000110001010000000000000000011000001110110100000000000000000000110110011011";
        ram[10] = "0b00000010100001010111111111111111111101111100101001111111111111111111110010001111000000000000000000110001101001100";
        ram[11] = "0b00001001011101011000000000000000000101111001001101111111111111111010100101000111011111111111111111110010101011000";
        ram[12] = "0b00000011111010000000000000000000000001010100000110000000000000000000010011111110111111111111111111111011100100100";
        ram[13] = "0b00010110100110111000000000000000000100000000000001111111111111111100111111010001011111111111111111101111000101100";
        ram[14] = "0b00010000010011000000000000000000001000110111101000000000000000000000111011100011100000000000000000001010001101010";
        ram[15] = "0b11101001011010011111111111111111111110110100100000000000000000000000100011110100000000000000000000000111101011100";
        ram[16] = "0b00100101011011010000000000000000000011111101011010000000000000000000111101000111100000000000000000011010001000000";
        ram[17] = "0b00000001000101010000000000000000000001000111110101111111111111111101110000001010000000000000000000001101000101110";
        ram[18] = "0b00110001001000100000000000000000000101001011110110000000000000000010001100000100011111111111111111100011110011011";
        ram[19] = "0b10101100101001100111111111111111111000110011011000000000000000000001001111010101011111111111111111100010111010000";
        ram[20] = "0b00110011010100001111111111111111110111000101101010000000000000000101010100011110111111111111111111100111011111110";
        ram[21] = "0b00010001111101110000000000000000001001001001111101111111111111111100000100010111000000000000000000000100100001100";
        ram[22] = "0b00000101111111000000000000000000000011011000000010000000000000000011011010001110111111111111111111110000001010101";
        ram[23] = "0b11000111111101010000000000000000000000110011010001111111111111111110111111100111000000000000000000010110010111000";
        ram[24] = "0b11111110110001010000000000000000000010110111010100000000000000000000010101111100011111111111111111011111011011001";
        ram[25] = "0b11011111100010001111111111111111110011111110001000000000000000000001001101111001111111111111111111110001010000011";
        ram[26] = "0b11111101101000111000000000000000000010010010110011111111111111111110110100110111011111111111111111110011010000101";
        ram[27] = "0b00000111011001100000000000000000000001010110101111111111111111111111011111001111011111111111111111111100011101011";
        ram[28] = "0b11111101101111011000000000000000000010010011111101111111111111111111000110101111111111111111111111111110010011111";
        ram[29] = "0b11100101010011101111111111111111101111111101000110000000000000000001001001000011000000000000000000001001111111111";
        ram[30] = "0b00011101011111110000000000000000000010100110011101111111111111111110110101001100011111111111111111011001101100011";
        ram[31] = "0b00011110011101111111111111111111111001001100001001111111111111111110111001000101000000000000000000000110100100110";
        ram[32] = "0b11110100000101101000000000000000000110100110000000000000000000000000010111010100111111111111111111010101011011000";
        ram[33] = "0b11101111111011011111111111111111110100001111001110000000000000000001001010000100111111111111111111111100011111101";
        ram[34] = "0b00001100011111010000000000000000000001111011000101111111111111111111100111011011000000000000000000111111010001100";
        ram[35] = "0b00010001000001100111111111111111110110010011000001111111111111111101010010100111111111111111111110011101101111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V) {


static const unsigned DataWidth = 113;
static const unsigned AddressRange = 36;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_ram* meminst;


SC_CTOR(conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V) {
meminst = new conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_ram("conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2d_cl_array_array_ap_fixed_4u_config8_s_w8_V() {
    delete meminst;
}


};//endmodule
#endif
