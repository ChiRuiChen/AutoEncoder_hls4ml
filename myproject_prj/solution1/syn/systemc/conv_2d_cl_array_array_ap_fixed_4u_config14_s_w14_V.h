// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_H__
#define __conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 113;
  static const unsigned AddressRange = 36;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_ram) {
        ram[0] = "0b11100001100110001111111111111111111111000000010001111111111111111111111011111110111111111111111111111010110001000";
        ram[1] = "0b11111001101000000111111111111111111101110010100001111111111111111110110000111110000000000000000000000100100000000";
        ram[2] = "0b00001000001000010111111111111111111100110100000101111111111111111111011001100000100000000000000000010101110111011";
        ram[3] = "0b00000110110100010000000000000000000001110110100100000000000000000010010001011000111111111111111111110000010111110";
        ram[4] = "0b01000001110111110000000000000000000101110000000010000000000000000001101010000001000000000000000000100011110111101";
        ram[5] = "0b11111101101111000000000000000000001100101100011000000000000000000010001100110010011111111111111111111011001001100";
        ram[6] = "0b00011111001100100000000000000000000000101000001111111111111111111111010101100110100000000000000000001001110001010";
        ram[7] = "0b00001011100100111000000000000000000001111111000000000000000000000011010010010100011111111111111111011100110101010";
        ram[8] = "0b11110001000011110111111111111111111011000000100010000000000000000000100011000010100000000000000000001100011101011";
        ram[9] = "0b11101101101010110111111111111111111010001010011011111111111111111111000101100000111111111111111111100110100011110";
        ram[10] = "0b00101010101110011000000000000000000011000110011010000000000000000001010011110011000000000000000000100011011011010";
        ram[11] = "0b11100111011010110111111111111111110010100101011011111111111111111111110110000100011111111111111111110101111001010";
        ram[12] = "0b00010000001000100000000000000000000011110101100111111111111111111111110101101000011111111111111111110111000011011";
        ram[13] = "0b00000110011010000000000000000000000101000111111100000000000000000001100011000111000000000000000000010111000101111";
        ram[14] = "0b00011010101100001000000000000000000110000101111110000000000000000000110111000101111111111111111111010000111111100";
        ram[15] = "0b11101000010011010000000000000000000110010111000110000000000000000000101011100010100000000000000000111100111110101";
        ram[16] = "0b00010111001000000111111111111111111011100101111000000000000000000000100101000010000000000000000000011001010110101";
        ram[17] = "0b11110011000011101000000000000000000111010101101100000000000000000011110001100100100000000000000000000010010100101";
        ram[18] = "0b11110011011110001111111111111111111000001101011101111111111111111111001111001110011111111111111111011101010010001";
        ram[19] = "0b11011100010100001111111111111111110101010001101011111111111111111110100000111110100000000000000000011101100011001";
        ram[20] = "0b00110110001111011111111111111111111010101100110100000000000000000000011000101010111111111111111111110101110100000";
        ram[21] = "0b11100001011100010111111111111111110011010110100010000000000000000000101011011011000000000000000000000101110011111";
        ram[22] = "0b00000010100110101000000000000000000010010101100001111111111111111101010111111000011111111111111111101001000010011";
        ram[23] = "0b11111110110000001000000000000000000111011111010011111111111111111110011001111110000000000000000000011011101101101";
        ram[24] = "0b11101111001001001111111111111111110011001100111011111111111111111100101110000001111111111111111111111110010110011";
        ram[25] = "0b00000001110000111000000000000000000010011101100110000000000000000000110111110111000000000000000000011000011100001";
        ram[26] = "0b00000010111110111000000000000000000010000000110010000000000000000010101010010111000000000000000000100111100110011";
        ram[27] = "0b00010011110111110111111111111111111111110110110011111111111111111111010100100110011111111111111111100111000000100";
        ram[28] = "0b11100100110001010111111111111111010000100100011000000000000000000000000111001100111111111111111111010101110011110";
        ram[29] = "0b11100010111001011000000000000000000001011100100100000000000000000000011000011111100000000000000000001010101010010";
        ram[30] = "0b11100100001101000111111111111111110110101010010111111111111111111110011111111100111111111111111111111100101001001";
        ram[31] = "0b11111100011011000111111111111111111111101101010001111111111111111110000101110010011111111111111111011010000001000";
        ram[32] = "0b01101001101111110000000000000000000011000000111100000000000000000100010111100011100000000000000001100111010010001";
        ram[33] = "0b11011101110110100111111111111111111010110111001101111111111111111110011000010001000000000000000000000011101011011";
        ram[34] = "0b00000010100000101000000000000000000010100000010110000000000000000001101000111101100000000000000000001100010100101";
        ram[35] = "0b00110110101101010000000000000000000111000010101100000000000000000010001101101100000000000000000000000001100111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V) {


static const unsigned DataWidth = 113;
static const unsigned AddressRange = 36;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_ram* meminst;


SC_CTOR(conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V) {
meminst = new conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_ram("conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2d_cl_array_array_ap_fixed_4u_config14_s_w14_V() {
    delete meminst;
}


};//endmodule
#endif
