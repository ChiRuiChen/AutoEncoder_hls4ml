// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.2.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_H__
#define __conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 238;
  static const unsigned AddressRange = 9;
  static const unsigned AddressWidth = 4;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_ram) {
        ram[0] = "0b1100010001111111111111111111111111111101100111111111111111111111100110100101110000000000000000001100001011011111111111111111111101110100000100111111111111111111111011000101110000000000000000000101111101111111111111111111111101111011001110";
        ram[1] = "0b1110010010001111111111111111111100000001001000111111111111111111111111111011111111111111111111111110000001000011111111111111111101010010000010000000000000000000000111010010000000000000000000000101100111100011111111111111111101011111011010";
        ram[2] = "0b1010000010111100000000000000000000100010000111000000000000000001000110100010110000000000000000000001010111011111111111111111111110000111111111111111111111111111001011001111100000000000000000001000000100110011111111111111111101100000111010";
        ram[3] = "0b1011000000010100000000000000000000010011011001111111111111111111111011010010111111111111111111101100011001100011111111111111111110010011001101000000000000000000001011001110010000000000000000001001100111111011111111111111111101100110101111";
        ram[4] = "0b1010011101001000000000000000000101011010010011000000000000000000010111101000010000000000000000000111000110110100000000000000000100001010010100000000000000000000011000110010000000000000000000000101010101010000000000000000000001001110011001";
        ram[5] = "0b1010101110000011111111111111111111110001000011111111111111111111000011110100011111111111111111111101001000011111111111111111111101110111000110111111111111111111011001011010100000000000000000001000100100010011111111111111111101011000111000";
        ram[6] = "0b1000111000101011111111111111111111110110101110111111111111111111111000110111100000000000000000001010000111111111111111111111111101011101001010000000000000000001000011100110000000000000000000001001011101111011111111111111111100111011111101";
        ram[7] = "0b1100110111110111111111111111111101000111111011000000000000000000000101100100001111111111111111111101100100101011111111111111111101011110011100000000000000000000101101110111000000000000000000000101001100111011111111111111111101101100101010";
        ram[8] = "0b1100011101011100000000000000000000000010010010000000000000000000101111001111100000000000000000000001101110111011111111111111111101101100101001111111111111111111100111011100100000000000000000000100111000111011111111111111111101101110010100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V) {


static const unsigned DataWidth = 238;
static const unsigned AddressRange = 9;
static const unsigned AddressWidth = 4;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_ram* meminst;


SC_CTOR(conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V) {
meminst = new conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_ram("conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2d_cl_array_array_ap_fixed_8u_config2_s_w2_V() {
    delete meminst;
}


};//endmodule
#endif
